
\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename puff.info
@settitle puff-uaf manual 3.0.0
@c %**end of header

@ifinfo
This is the technical manual for Puff.
Copyright @copyright{} 2003 University of Alaska, Fairbanks.
@end ifinfo


@titlepage
@title Puff Technical Manual 
@subtitle An Ash Particle Tracking Model
@subtitle Version 3.0@c@today{}
@subtitle @url{puff.images.alaska.edu}
@vskip 5mm
@iftex
  @image{images/puff1}
@end iftex
@author Rorik Peterson @email{rorik@@gi.alaska.edu}
@author Ken Dean @email{ken.dean@@gi.alaska.edu}
@author Jon Dehn @email{jdehn@@gi.alaska.edu}
@vskip 5mm
@author Geophysical Institute
@author University Alaska, Fairbanks

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@ifnotinfo
  @image{images/logos2}
@end ifnotinfo

Copyright @copyright{} 2006 University of Alaska, Fairbanks.
@end titlepage

@contents
@node Top, Preface, , (dir)
@comment node, next, previous, up

@menu
* Preface::		Some comments...
* Introduction::	The Introduction
* Installation::	Directions for installation
* Tutorial::		A quick start tutorial
* The puffrc file::	The resource file
* Options::		Description of all options
* GUI::			The graphical user interfaces
* Technical Details::	Technical details
* Troubleshooting::	Understanding errors and warnings
* License::		License for Puff 2.6
* Index::               Complete index.
@end menu

@node Preface, Introduction, Top, Top
@unnumbered Preface - version 1.0
This manual is a compilation of material originally written by several people. The bulk of the material pertaining to @command{puffgui} and @command{puffview} was written by D. S. Tillman of John Hopkins Applied Physics Laboratory (JHAPL) as part of a University Partnering for Operation Support (UPOS) project.  That material first appeared as @i{PUFF User's Guide: PUFF-AFWA Version 1.10} by D.S. Tillman.  This new manual attempts to broaden the audience by addressing both the publicly available version of Puff and the AFWA-specific version.  Thus, the title of this manual is simply the @i{Puff Technical Manual} and the version reset to 1.0.  

Craig Searcy originally wrote the Puff collection of programs in C++, and some material has been taken from the on-line help he provided.  Jim Long began collecting this material, which had become somewhat scattered.  Rorik Peterson wrote the remaining parts and put it into @TeX{}@command{info} format.  Rorik is the current maintainer of the documentation and public version of Puff, so all comments and criticisms should be directed to @email{rorik@@gi.alaska.edu}.

@unnumbered Preface - version 2.0
This is a complete reworking of the manual.  The newest version of the GUI @command{pufftk} is completely documented, and the new post-processor @command{ashxp} is introduced.  The older Tcl/Tk applications @command{puffgui} and @command{puffview} are no longer part of the Puff distribution.  Some of the more cumbersome third-party software has been removed, which makes installation much easier and creating pictures and animations much quicker.  Attempts have been made to address the many new features available in the UAF version of Puff, including multiple eruptions and restart files.  All C++ code is now fully compliant with the most current standards, and compiles with strict protocol checking.  Conversion of GRIB files into puff-friendly netCDF files is still a little awkward and done using @command{grib2pf}, a perl script.  However, this script is fairly easy to customize for different and changing GRIB files.  Configuration and building the applications is now done using GNU autotools, and has been successfully tested on Linux, Sun, and MacOSX operating systems.  Rorik Peterson is the current maintainer, and questions and comments should be directed to him @email{rorik@@gi.alaska.edu}.

@unnumbered Preface - version 3.0
The Puff volcanic ash tracking model has gone through many changes since version 2.0.  The only GUI is now through a web browser, removing the Tk toolkit requirement and hopefully making the program more accessible.  It also means the public access web version looks and functions exactly like a local installation.  There have also been many improvements to the reading of windfield data.  Most complient NetCDF files should now be read by puff with no intermediate processing required.  The @command{uni2puff} utility is now completely integrated within @command{puff} and all processing is done on-the-fly.  The @command{grib2pf} utility is not required, and Unidata's @command{gribtonc} can be used instead.  The physics have been improved.  Variable fall dynamics are now supported, and turbulent diffusion can be automatically calculated and the ambiguous @option{--diffuseH} does not need to be specified. 

@node Introduction, Installation, Preface, Top
@comment node, next, previous, up

@chapter Introduction

Puff-UAF is slightly different than Puff 2.6 (written by Craig Searcy in the 1990's), but evolved from it and carries its license.  It is GPL'ed and a separate branch from 2.6, thus a name change and new numbering system.

Puff models the dispersion of volcanic ash following an eruption.  It requires horizontal wind field data as a function of geopotential height on a grid covering the area of interest.  Puff will then output the location (in 3 dimensions), size, and age-since-eruption of representative ash particles.  Puff is a fast and efficient research and operational tool for predicting the trajectories of ash particles, which is essential for hazard assessment.

Puff was originally developed at the University of Alaska, Fairbanks (UAF) by Craig Searcy, based on a model conceived by Dr. H. Tanaka at the University of Tsukuba.  Subsequent development then split between the Air Force Weather Agency (AFWA) and the National Weather Service (NWS). The AFWA modifications were initially performed by D.S. Tillman at the John Hopkins Applied Physics Laboratory (JHAPL), and others are continuing the development.  Their intent was to develop an operational tool specifically for the needs of AFWA.  The development at the NWS is continued by Craig Searcy.  A copy of the earlier version before splintering has been retained at UAF and is @emph{Puff Version 2.6}, available at the Puff website @url{http://puff.images.alaska.edu}.  Subsequent development of Puff at UAF has begun to dramatically change the program.  For this reason, it has been renamed Puff-UAF and a new version numbering system started.  Puff-UAF is a completely C++ compliant modification of Puff 2.6 with some of the "bells and whistles" from the AFWA version.  Most importantly, it contains several new and unique features. 

Puff is actually a collection of interacting modules as shown in the figure below.  The entire collection is called the Puff suite, or simply Puff with a capital 'P'.  At the heart of the Puff suite is the main program, which we refer to as simply @command{puff} with a lowercase '@command{p}'.  You can interact with the main program @command{puff} through @command{webpuff}, the browser-based GUI, or via the command line.  

In addition to specifying eruption parameters,  wind field data valid for the time and location must be provided.  This data can come in a variety of formats, and the Puff suite has various modules to handle each type of data as shown in the figure.  The direct input to @command{puff} must be in netCDF format.
  
The output from @command{puff} is also a NetCDF file. The Puff suite includes several modules for analyzing the output data.  There are two post-processing utilities: @command{ashxp} and @command{ashgmt}.  Both produce graphic maps of the data.  @command{ashxp} produces JPEG images, and @command{ashgmt} produces postscript maps using the Generic Mapping Tools (GMT), PNG images using ghostscript, and GIF images using ImageMagick @command{convert}.  The data can be simply dumped as text using @command{ashdump}.  

The Puff suite contains the following different executables. 

@enumerate
@item @command{ashdump} Utility for viewing information in the model output files
@item @command{ashdump.pl} A perl version of @command{ashdump}
@item @command{puff} Volcanic Ash Dispersion model.
@item @command{ashxp} Utility for creating graphical images form netCDF format ash files generated by @command{puff}.
@item @command{ashgmt} Utility for creating postscript, PNG, and GIF images using GMT.
@item @command{webpuff} Perl script that starts @command{minihttpd} on localhost so @command{puff} can be run locally using a web browser.
@end enumerate

@image{images/flow3}

@node Installation, Tutorial, Introduction, Top
@comment node, next, previous, up

@chapter Installation
@cindex installation
@cindex @kbd{configure}

Puff reads and generated NetCDF files, so Unidata's NetCDF library must be installed first.  It is available from @url{http://www.unidata.ucar.edu/software/netcdf}.  The Udunits library from Unidata is also required; @url{http://www.unidata.ucar.edu/software/udunits}.  Everything else you need to run @command{puff}, @command{webpuff}, and produce JPEG images with @command{ashxp} is included in the @file{puff-uaf-3.x.x.tar.gz} file.  However, somewhat better-looking maps can be made using @command{ashgmt}, which requires the following external utilities.
@enumerate

@item GMT - Generic Mapping Tools, available from @url{http://gmt.soest.hawaii.edu}
@item NCO - NetCDF Operators, available from @url{http://nco.sf.net}
@item @command{convert} - part of ImageMagick, available from @url{http://www.imagemagick.org}
@item @command{gifsicle} - avialable from @url{http://www.icdf.org/gifsicle}
@end enumerate

@cindex @command{gifsicle}
@cindex GMT
@cindex NCO

It is advisable to install the above before Puff because the @command{configure} script will attempt to find these utilities.  
  Building and installation is done using GNU autotools.   The most basic build is done by @kbd{./configure; make; make check; make install}.  However, there are several compilation options, which can be viewed using @kbd{./configure --help}.  Most important may be specifying the location of @file{libnetcdf} and @file{libudunits} using the environment variable @env{NETCDF_LIB}.  The location of the associated header files can be specified with @env{NETCDF_INC}.  Puff can be built with shared or static libraries, but static libraries are recommended and can be done using @kbd{./configure --disable-shared}.

@cindex @env{NETCDF_INC}
@cindex @env{NETCDF_LIB}
@cindex shared library

The installation location of Puff is specified with the @kbd{--prefix=PREFIX} option to @command{configure}.  The default is the same as the build directory, which is usually not advisable.  Once installed, the @file{PREFIX/bin/} directory contains the programs, @file{PREFIX/web/} contains the web-browser based programs including @command{webpuff}.  The @file{PREFIX/etc/} directory contains auxillary image and font files, and a few text files used by Puff.  The documentation is inside @file{PREFIX/doc} and includes PDF, HTML and postscript version.

@section Tests
A small battery of tests are available in the @file{test} directory of Puff-UAF, and can be executed using @kbd{make check}.  The tests are constantly changing and evolving.  The basic idea is to execute @command{puff} using several different options.  Install only after all tests have succeeded.  When each test succeeds, the message @samp{PASS: testXX.sh} is written to standard output. When a test fails, an error log called @file{testXX.err} remains in the @file{test} directory.  This log may provide enough information to fix the problem.  If not, email the error log, along with the program version (@command{puff --version}), to the @email{rorik@@gi.alaska.edu, puff maintainer}.
@cindex tests

In order to run these tests, wind field data files that may not be included with the distribution are required.  These files reside in the @file{puff-uaf-3.x.x/data} directory.  If they are not already available, they will be automatically downloaded from the web site @url{http://puff.images.alaska.edu/download} using @command{wget} when running @command{make check}.  If you do not have @command{wget}, you will need to retrieve the files manually before running the tests. 
@cindex @command{wget}

@node Tutorial, The puffrc file, Installation, Top
@comment node, next, previous, up

@chapter Tutorial

@section Quick Start
In its most simple operation, Puff needs the location and time of a volcanic eruption, with the wind field data valid during the time of the eruption.  Go to the directory containing the wind field data for Sept 25 2002. These files are retrieved using @command{wget} when @kbd{make check} is executed and put into the @file{data} directory. Optionally, they can be downloaded manually from @url{http://puff.images.alaska.edu/download/}). First convert the input data files into Puff-friendly format using the two @command{uni2puff} commands

@code{uni2puff -unifile 2002092500_avn-U.cdf -var u}

@code{uni2puff -unifile 2002092500_avn-V.cdf -var v}

This pair of commands should create two corresponding files called @file{02092500_puffU.cdf} and @file{02092500_puffV.cdf}.  These files can now be used to simulate the eruption of Mt. Spurr on Sept. 25, 2002.

@code{puff -volc spurr -eruptDate "2002 09 25 00:00"}

If all goes well, you should see some verbiage concerning the location of the volcano and what output files were saved.  If errors or warning occurred instead, see @xref{Troubleshooting}, for help.  Now use @command{ashdump} to see the output data from 12 hours after the eruption began

@code{ashdump 02.268.1200_ash.cdf | more}

It is a good idea to pipe the output to a pager since thousands of lines of text will scroll by otherwise.  Once again, see @xref{Troubleshooting},  if errors occur.  The first few lines give the name of the data file, location and time of the eruption, timestamp for the data file, and the number of particles in the data file.  Next is a listing in column format of the location and attributes of each ash particle.

Perhaps you want to write this data to a text file called @file{ash.dat} to be read by anther application.  You don't want the header information and are only interested in the latitude and longitude values.

@code{ashdump -lat -lon 02.268.1200_ash.cdf > ash.dat}

Alternatively, use @command{ashxp} to visualize the data.  To generate a single JPEG image of the data at 06:00
@cindex JPEG

@code{ashxp --projection=polar 02.268.0600_ash.cdf}

This will generate a file @file{02.268.0600_ash.jpg}.  If you process all ash files at the same time, the bounding box of each image will be the same.  Otherwise, the bounding box is adjusted to contain all ash particles with a minimum size of 256 x 256 pixels. Now create a sequence of JPEG images with a bounding box covering Alaska and showing only ash between the ground and 2km up using 5 pixel particles.
@cindex bounding box

@code{ashxp --hgt-range 0/2000 --latlon 60/80/190/220 --pixel 5 02.268*ash.cdf}

@section GUI
Run the puff GUI by typing @command{pufftk} at the command prompt.  After a few seconds, you should see the @command{pufftk} window open.

@image{images/pufftk_gui}


Using the @b{Volcano} drop-down menu in the upper, left corner, choose BUZZARD CREEK.  The @b{Lon} and @b{Lat} entry boxes should fill automatically after pressing @key{ENTER}.  Specify that the eruption begins at 3AM on September 25, 2002 by changing the @b{Eruption Date} entry box to read @samp{2002 09 25 03:00}.   Using the @b{wind field Model} drop-down menu, chose @b{general}, and then use @b{Cycle} to choose 02092500.  If there are not options listed under @b{Cycle}, change the @b{Data Dir} to point to where the data is.  In the Puff-UAF distribution, data files are located in the main directory under @file{data/}.  Press the @b{Scan} button after changing the data directory to regenerate a listing of data cycles. Leave the rest of the parameters at their default value and press the @b{Run} button in the lower, right corner.  

The status message in the lower, left corner should change to @b{Initializing...}, and then to a date/time string should appear and begin to increment.  Also, the progress bar in the lower, right will indicate the simulation status.  When complete, the status message will change to @b{Done.}

@section Multiple Eruptions
@cindex multiple eruptions
@cindex @option{restartFile}

Puff can simulate multiple eruptions from either the same volcano or a different volcano.  There is no pre-set upper limit to the number of eruptions, but memory restrictions obviously apply.  Perhaps you are tracking activity on Mt. Etna, which has an initial small eruptive event, is docile for several hours, and then erupts again more violently.  In order to simulate this event, you begin Puff with the initial eruption, and then "add" the second eruption when it happens using the @option{-restartFile} option.  For example, first simulate the initial eruption
@cindex multiple eruptions

@command{puff -volc Etna -eruptDate "2002 09 25 01:00" -eruptHours 1 -runHours 5 -saveHours 1 -nAsh 1000}

Then add the second eruption while loading in the data from the initial eruption in order to continue tracking it.

@command{puff -volc Etna -eruptDate "2002 09 25 06:00" -eruptHours 1.5 -restartFile "02.268.0600_ash.cdf" -nAsh 5000}

By specifying a different number of particles for each eruption, different magnitude eruptions can be simulated.  If the restart file is not timestamped the same as the next eruption time (@option{-EruptDate}, a warning is issued but the simulation continues and the particles from the restart file are 'transposed' in time to the @option{-eruptDate}.  This might occur if the first simulation did not output files exactly at the time the second eruption began.  

The restart capability can be used to simply extend and existing simulation without creating a second event.  In this case, only @option{-restartFile} and @option{-eruptDate} would be required.

@section Using Remote Sensing Data
You can use Puff to simulate the movement of an existing ash cloud.  Perhaps you have remote sensing data that indicates there is an existing ash cloud east of Mt. Reventador, Ecuador.  The cloud is rectangular with higher elevation ash near the southern end.  You can use that information to initialize Puff using the @option{-restartFile} option.  The restart file contains lat/lon pairs that define a polygon outlining the ash cloud, interior points giving approximate elevation of the ash, and a size distribution.  The format of the restart file is
@cindex remote sensing data
@cindex @option{restartFile}

@anchor{cloud specification file}
@verbatim
# comments have a 'pound' sign before them
# all field have a XML-like structure, and can occur in any order
<<verticies>
283.0 -0.0 # this is a comment after a vertex specification
283.5 -0.0
283.5 -1.0
283.0 -1.0
<</verticies>
# elevation points are lon[degE] lat[degE] elevation[m]
<<elevations>
283.3 -0.1 10000
283.3 -0.3 12000
283.3 -0.5 14000
283.3 -0.7 16000
<</elevations>
#size is optional, but is -ashLogMean and -ashLogSdev if specified
<<size>
-6 1
<</size>
@end verbatim


The @verb{|#|} symbol indicates anything after it on the line is a comment.  The size distribution information is optional.  No line segments in the defined polygon may intersect, so a figure-8 is an invalid polygonal shape.  The number of particles are weighted proportional to the elevation points.  To create an area with a greater density of particles, add more elevation points to that area.  For example, the following would create a denser particle distribution in the northern part of the cloud in the above example
@verbatim
<<verticies>
283.0 -0.0 # verticies are the same
283.5 -0.0
283.5 -1.0
283.0 -1.0
<</verticies>
<<elevations>
283.3 -0.1 10000
283.3 -0.3 12000
283.3 -0.5 14000
283.3 -0.7 16000
<</elevations>
<<size>
-6 1
<</size>
# more points can be added to the above field, or a new one created.
# repeating elevation points adds more weight to that area of the cloud
<<elevations>
283.3 -0.1 10000
283.3 -0.1 10000
283.3 -0.3 12000
<</elevations>
@end verbatim


@section Multiple Runs
@cindex @option{repeat}
@cindex multiple runs
Puff uses Gaussian random motion (simulated Brownian motion) to simulate turbulent diffusion of ash particles.  For this reason, the results of each simulation are unique.  To obtain an "average" result, several simulations should be run with the same input parameters.  In order to do this without simply running Puff over and over, use the @option{-repeat} option.  For example, to get an ensemble of 10 6-hour results of an Etna eruption, each with unique filenames
@cindex @option{repeat}
@cindex multiple runs

@example
puff -volc etna -eruptDate "2002 09 25 00:00" -runHours 6 -saveHours 6 \
-eruptHours 1 -repeat 9
@end example

Note that a @option{repeat} value of 9 produces 10 simulations.  The result files will have the name @file{02.268.0600_ashxxx.cdf} where @file{xxx} is a three digit number starting at 000.  An average file can then be created using an averaging utility such as the NCO operator @command{ncwa} (see the NCO homepage at @url{http://nco.sourceforge.net}).  Note that this is different than using the same random number seed, which would cause each simulation to be identical.
@cindex random number

@section Converting BADC @samp{pp} files
@cindex pp file format
@cindex BADC
@cindex stratopheric winds
The British Atmospheric Data Center (BADC) produces global gridded windfields that include stratospheric winds (1000-0.1 millibars).  Data is available from their website at @url{http://badc.nerc.ac.uk/} in a binary format known as @samp{pp}.  The Puff distribution includes a small utility called @command{pp2nc} that converts these files into netCDF files that can subsequently be used by @command{puff}.  To create an initial archive of data in netCDF format, use
@example
pp2nc ppassm_operh_y03_m08_d01_h12.pp
@end example
for example. This command will create the netCDF file with the mask @file{YYYYMMDDHH_badc.nc}, or @file{2003080112_badc.nc} in this example.To protect against inadvertent errors, @command{pp2nc} will not clobber existing netCDF files, so (re)move them if you desire to create new ones with the same name.  To add further data to archive use the @samp{add} command followed by the netCDF archive name, and subsequently a listing of the @samp{pp} files to add.
@example
pp2nc add 2003080112_badc.nc ppassm_operh_y03_m08_d02_h12.pp [...]
@end example

If you already have a collection of @samp{pp} files, command-line wildcard expansion may be useful.
@example
pp2nc add 2003080112_badc.nc ppassm_operh_y03_m08_*pp
@end example

Alternatively, if may be useful to create a script that downloads new @samp{pp} data each day from the badc website and @samp{add}s it to the archive.  Then set this script up to run using @command{cron}.

When creating the netCDF archives, remember that Puff only reads in a single data file for each simulation, so include all the data you wish to use in the file.  See @xref{Technical Details}, for further details on time interpolation and extrapolation.

@section Converting GRIB files
@cindex GRIB
The recommended way to convert GRIB files into netCDF, which Puff can understand, is to use @command{gribtonc} from the Undata decoders.  These decoders are fairly robust, very well maintained, and have a relatively large support group. See @url{http://unidata.ucar.edu/packages/decoders}. 

If not using @command{gribtonc} for some reason, conversion of GRIB files into something Puff understands can be done using @command{grib2pf} (grib to puff-friendly).  This program is a Perl script, and can be easily modified and customized for different needs.  It currently understands the following GRIB grid numbers
@cindex grid number, GRIB

@itemize @bullet
@item 3: 1-degree x 1-degree global
@item 207: 95-km regional Alaska, polar stereographic
@item 216: 45-km regional Alaska, polar stereographic
@item 240: 1-degree x 1-degree global (nogaps)
@item 249: 12-km regional Alaska, polar stereographic (experimental)
@end itemize

To convert a time-series of forecast files downloaded from NCEP for Grid 216 over Alaska

@example
grib2pf -t 6 fh.0000_tl.press_gr.awipak fh.0006_tl.press_gr.awipak
@end example

The @option{-t HH} option specified the time differential between the forecast files in hours.  It is your responsibility to specify the files in increasing order of forecast time, which is easily done using most UNIX shell expansion utilities.  The @samp{u} and @samp{v} components of wind are extracted from the input GRIB file using Wesley Ebisuzaki's @command{wgrib} and written to a netCDF data file using @command{ncgen}.  The grid number can be explicitly given using the @option{-g NUM} option, however, if it is not one that @command{grib2pf} understands, the files cannot be processed.  The default output file is based on the valid time of the forecast data, and will be of the form @file{YYYYMMDD_gridXXX.cdf}, where @samp{XXX} is the grid number.  Using the @option{-o FILENAME} will override this file name. Creation of the netCDF file can be suppressed using @option{-n}, and a text file in the netCDF @samp{cdl} format will remain.  Silence is obtained using @option{-s}, and verbose output by @option{-v}.

To modify @command{grib2pf} for a new grid, editing the script is required but quite easy.  There are two subroutines at the end of the script: @samp{header} and @samp{footer}.  Create a new entry in each subroutine for the new grid number.  Many fields will remain the same, however, changing the number of grid points in the new grid, and defining the latitude and longitude of the corners must be adjusted as necessary.  GRIB files do not contain the dimension values such as latitude, longitude and elevation, and these values must be added to the appropriate location in the @samp{footer} subroutine.  

@cindex wgrib
@cindex ncgen

@node The puffrc file, Options, Tutorial, Top
@comment node, next, previous, up

@chapter Using the @file{puffrc} file

Beginning with Puff version 2.1, the plain text file @file{puffrc} is used.  This file contains information about data files which simplifies the command-line syntax and places the burden of determining the most-recent data on the program.  The search protocol for finding this file is to look in the user's home directory, then the current directory, and finally a global location determined by the program's installation location.  If the program is located in @file{/usr/local/bin}, the global default file is @file{/usr/local/etc/puff/puffrc}.  The home directory is determined by using the environment variable @env{HOME}.  If the file is located in either the home or current directory, the name should be pre-pended with a period, i.e. @file{.puffrc}.  This search protocol may be overridden using the @option{-rcfile} option.

Below is a sample resource file:
@verbatim
model=avn mask=YYYYMMDDHH_avn-U.cdf var=u path=/var/data/avn/  
model=avn mask=YYYYMMDDHH_avn-V.cdf var=v  
model=avn mask=YYYYMMDDHH_avn-\H.cdf var=z
model=cmc mask=YYYYMMDDHH_cmc.cdf var=T,u,v,z path=/var/data/cmc 
model=puff mask=YYMMDDHH_puffU.cdf var=u path=/home/rorik/puff/data
model=puff mask=YYMMDDHH_puffV.cdf var=v path=/home/rorik/puff/data
model=badc var=u,v mask=YYYYMMDDHH_badc.nc \
path=/var/data/ukmet
dem=gtopo30 path=/home/rorik/data/GTOPO30
dem=dted0 path=/home/rorik/data/nima_dted0/dted
@end verbatim

Each line in the file contains a directive.  Each directive must end with a carriage return.  Lines may be broken by placing a '\' as the final character (no spaces afterwards). In the above example, there are two different types of directives: @samp{model} and @samp{dem}.  The @samp{model} directives are used to indicate different model sets that can be used.  The directive indicates where meterological data is located (path), what the file naming scheme is (mask), the type of data located in that file (var), whether the data contains a record dimension (record), and a nickname for that data set (model).  The @samp{dem} directive indicates where the data for each type of DEM is located (path) and a nickname for it (dem).  There is no limit to the number of directives that may be in the file, and incorrect directives (i.e. file locations that do not exist) are not checked for validity unless that data type is being used.  The first parameter (@samp{model} or @samp{dem}) must occur first on the line, however, the following paramater/value pairs can occur in any order (i.e. @samp{mask}, @samp{path}, @samp{var}, etc).

To indicate the data set for a simulation, use the @option{-model} option with the corresponding nickname.  Puff will then read the resource file to determine the file naming protocol for that model type, and then look in the appropriate location for the most recent data preceeding the eruption begin time.  As an example, assume the following simulation using the example resource file above.

@example
puff -model=cmc -eruptDate "2003 05 10 19:30" -volc Reventador
@end example

Puff will look in the directory @file{/var/data/cmc} for data files.  The naming protocol will use the mask @samp{YYYYMMDDHH_cmc.ncdf} where @samp{YYYY} is a 4-digit year, @samp{MM} is a 2-digit month, @samp{DD} is the two-digit day, and @samp{HH} is the 2-digit hour.  The components of wind may be located in the same or different files, and the @samp{var=} part of the directive is used to specify the data within that file.  For the @samp{cmc} data, all components are in the same file. For the @samp{avn} data, each component is in a separate file. Note that the @samp{avn} geopotential height data files (@samp{var=z}) have a literal @code{H} in the name.  In order to differentiate literals from year, month, day, and hour specifications, they are escaped using the @verb{|\|} character.  Assuming data arrives in every 12 hours, Puff would find the u component of wind data in the file @file{200305101200_avn-U.cdf}.  However, if data arrived every 6 hours, Puff would find the file @file{200305101800_avn-U.cdf}. Furthermore, the corresponding geopotential height data file would be @file{200305101800_avn-H.cdf} where the literal @samp{H} is preserved in the data file. .

If the vertical coordinate for the windfield data is not pressure, the geopotential height file is not necessary, and will not be used even if it is available.  If @file{uni2puff} is used to convert file ahead of time to geopotential height coordinates, the @option{model=puff} directive can be used, which is the current default.

The @samp{dem=} directive is fairly straight forward, and only the directory in which the DEM data is located is specified using the @samp{path=} part of the directive.  See @xref{digital elevation models}.
@node Options, GUI, The puffrc file, Top
@comment node, next, previous, up

@chapter Options
A complete listing of all options available to each program is available by using the @option{-help} option.  Different options are used to customize the operation of each program.  Boolean options are turned on when given without an argument, and  @samp{true}, @samp{True}, @samp{false} and @samp{False} are acceptable arguments.

@section Options for @command{puff}
The different options @command{puff} accepts fall generally into three different categories: description of the original ash plume, control of program input and output, and customization of the simulation.

@subsection Initial Ash Cloud Description
There are six different characteristics of the initial ash cloud that can be customized.  If the option is not given, the default value is used.  The only required argument is @emph{either} @option{-volc} or @option{-latLon}. and the beginning of the eruption @option{-eruptDate}.  (The combined options @option{-volcLat} and @option{-volcLon} accomplish the same thing.) If a restart file is used (@option{-restartFile}, the volcano name/location specification is optional. The following table lists all the options for describing the initial ash cloud.
@cindex @option{volc}

@anchor{default option values}
@multitable @columnfractions 0.2 0.2 0.6
@item @b{option} @tab @b{Default} @tab @b{Description}
@item @option{ashLogMean} @tab -5 @tab base-10 log of the mean particle size in meters
@item @option{ashLogSdev} @tab 1 @tab standard deviation in the particle size distribution
@item @option{lonLat} @tab @emph{none} @tab longitude/latitude of the volcano
@item @option{nAsh} @tab 3000 @tab number of ash particles
@item @option{noFallout} @tab false @tab do not let particles fall gravitationally
@item @option{phiDist} @tab @emph{none} @tab particle phi distribution
@item @option{plumeMax} @tab 16000 @tab maximum plume height in meters
@item @option{plumeMin} @tab 0 @tab minimum plume height in meters
@item @option{plumeHwidth} @tab 0 @tab initial horizontal spread
@item @option{plumeZwidth} @tab 3 @tab initial vertical spread
@item @option{plumeShape} @tab linear @tab vertical distribution of particles
@item @option{volc} @tab @emph{none} @tab name of the volcano
@item @option{volcLon} @tab @emph{none} @tab longitude of the volcano
@item @option{volcLat} @tab @emph{none} @tab latitude of the volcano
@end multitable

@cindex @option{nAsh}

 A distribution of ash-particle sizes is created at initiation.  There are two different ways to specify the particle distribution.  First, a gaussian distribution with an average particle radius and size distribution can be controlled through the options @option{-ashLogMean} and @option{-ashLogSdev}. For example, @option{-ashLogMean=-5 -ashLogSdev=2} will result in a distribution with radius @emph{r} in meters

@tex
$r = 10^{-5 +/- 2 gzero}$
@end tex

@ifnottex
r = 10^(-5 +/- 2*gzero)
@end ifnottex

where @emph{gzero} is a gaussian distribution with a mean of zero.

@cindex @option{phiDist}
@cindex size distribution
@cindex phi distribution

Alternatively, a custom size distribution can be specified using a @emph{phi} distribution with the @option{-phiDist} option.  The phi distribution is a lognormal distribution such that

@tex
$\phi = -\log_2 d$
@end tex

@ifnottex
phi = -log_2 d
@end ifnottex

where @emph{d} is the particle diameter in millimeters.  The @option{-phiDist} option takes a string specifying value pairs of phi and the percentage of particles by mass that are in that bin.  An example would be @option{-phiDist="1=25.5;2=50;3=24.5"}  which means that 25.5\% of the particles (by mass) have a diameter of 2^(-1) millimeters, etc.  If the percentages do not sum to 100, they are normalized. The quotes are necessary to protect the option from the shell.  Because mass is proportional to the diameter cubed, phi distributions become skewed toward the smaller particles in the Lagrangian framework Puff uses.  For example, @option{-phiDist "3=50;6=50"} means that only about 1 in 500 particles are the larger size.

 The particle size effects the settling velocity. The default settling law is Stokes law 
@cindex settling
@cindex Stokes Law
@cindex @option{ashLogSdev} 
@cindex @option{ashLogMean} 

@tex
$V = (2/9)r^2(\rho_s-\rho_f)g = r^2\,G$
@end tex

@ifnottex
V = (2/9)r*r*d_rho*g = r*r*G
@end ifnottex

where @emph{G = 1.08e9} is a constant.  The option @option{-noFallout} forces the constant @emph{G = 0}, so vertical motion is only caused by diffusion and wind velocity.
@cindex @option{noFallout}

Variable fall dynamics based on the Reynolds number are possible by specifying @option{-sedimentation reynolds}.  In this case, the fall velocity is calculated for each particle at each time step based on its size and environment.  There are three flow regimes possible with this option: turbulent, transitional, and laminar (Stokes).  This option should only be used for high-altitude plumes, large particle sizes, or when very detailed fall information is desired due to the extra run-time required.
@cindex settling, variable

When using variable fall dynamics, it is recommended that a gridded temperature field be given in addition to the windfields.  To do this, the variable @samp{T} is put into the @file{.puffrc} resource file (i.e. @samp{var=T,u,v}.)  If there is no temperature data, a 'standard atmosphere' is assumed.

The @option{-plumeMax} and @option{-plumeMin} parameters meanings differ based on the vertical ash distribution selected. There are three possibilities for a distribution.
@cindex plume shape
@cindex @option{plumeMax}
@cindex @option{plumeMin}

@subsection Particle Distributions
@cindex @option{plumeShape}
The initial distribution of particles in the vertical dimension can be specified using three different distributions.

@center @image{images/plume_shape}

@i{Linear Ash Distribution} (default) @option{-plumeMax} corresponds to the maximum height of the ash. @option{-plumeMin} corresponds to the minimum height of the ash. The ash particles are linearly distributed using a random function with a uniform probability distribution function over the desired range. 
@cindex linear plume shape

@i{Exponential Ash Distribution} @option{-plumeMax} represents the approximate top of the ash. @option{-plumeMin} is not used. The following formula is used to place sample ash particles in the vertical distribution: 

@tex
$
S = 0.25\, \cdot$ plumeZwidth $\cdot\, R$

height = plumeMax - plumeZwidth $\cdot\, E + S
$
@end tex

@ifnottex
S = (0.25) x (plumeZwidth) x (R)

height = plumeMax - (plumeZwidth) x (E) + S
@end ifnottex

@cindex exponential plume shape
where @option{-plumeZwidth} represents an approximate vertical range over which the ash will be distributed (default: 3000 meters), @b{R} is a uniformly distributed random number between 0 and 1, @option{-plumeMax} is the approximate top extent of the ash (meters), and @b{E} is a positive random number from an exponential distribution of unit mean 

@i{Poisson Ash Distribution} @option{-plumeMax} represents the approximate top of the ash. @option{-plumeMin} is not used. The following formula is used to place sample ash particles in the vertical distribution:

@tex
$
S = 0.5\,\cdot$ plumeZwidth $\cdot\, R$

height = plumeMax - plumeZwidth $\cdot\, P + S
$
@end tex

@ifnottex
S = (0.5) x (plumeZwidth) x (R)

height = plumeMax - (plumeZwidth) x (P) |+ S
@end ifnottex

@cindex Poisson plume shape
where @option{-plumeZwidth} represents an approximate vertical range over which the ash will be distributed (default: 3000 meters), @b{R} is a uniformly distributed random number between 0 and 1, @option{-plumeMax} is the approximate top extent of the ash (meters), and @b{P} is an integral value drawn from a Poisson distribution of unit mean.
@cindex @option{plumeZwidth}
 
The option @option{-plumeHwidth} affects the horizontal distribution of the ash particles. It uses a uniformly distributed random process to determine the ash particle location in a circle of radius @option{-plumeHwidth} (at the @option{plumeMax} height) centered on the volcano site. NOTE: The horizontal distance that the ash is displaced from the cone is determined by taking the results of the random offset determination and multiplying them by the ratio of the height of the particle to the top of the plume. So the net shape of the plume is an inverted cone where particles are located directly over the volcano at the lowest level and extend out further horizontally with increasing plume height. 
@cindex @option{plumeHwidth}

Specification of the volcano location is done using either @option{-volc} or @option{-lonLat} (the combination of @option{-volcLon} and @option{-volcLat} accomplish the same thing.) The values should be separated with a slash, such as @option{-lonLat 212.2W/44N}.  If a north/south/east/west direction is not specified, east and north are assumed. (The same applies to @option{-volcLon} and @option{-volcLat}.)   When a volcano name is specified using the @option{-volc} option, the file @file{volcanos.txt} is consulted to find the volcano latitude, longitude, and elevation.  If the volcano name specified cannot be found in that file, an error results.  Specification of the name is uppercase/lowercase insensitive, however, correct spelling is required.  A shortened name can be used if it is unambiguous, so @option{-volc=bezy} is valid for Bezymianny, however, @option{-volc=KORO} is ambiguous (both Koro in Fiji and Korosi in Africa).  The command @command{puff -showVolcs} will produce a listing of all the known volcanos, which is useful to check for correct spelling.  The distribution comes with a default @file{volcanos.txt} file, which can be edited without recompiling the program.  The location of the file is set using the environment variable @env{PUFF_VOLCANO_LIST}, and cannot also be specified on the command line using the @option{-volcFile} option. 

@cindex @env{PUFF_VOLCANO_FILE}
@cindex @file{volcanos.txt}
@cindex @option{volcFile}
@cindex @option{lonLat}
@cindex @option{volcLon}
@cindex @option{volcLat}

If the volcano name is not among the known list of volcanos, the latitude and longitude can be specified instead.  These options override the @option{-volc} option.   Longitude should be in degrees East and latitude in degrees North.

@subsection Program Input/Output Control
The following table of options control input and output from the program:

@multitable @columnfractions 0.2 0.2 0.6
@item @b{option} @tab @b{Default} @tab @b{Description}
@item @option{argFile} @tab @i{none} @tab file containing command-line arguments
@item @option{fileDate} @tab @i{none} @tab date/time string for the input data
@item @option{fileT} @tab @i{none} @tab filename containing the @samp{T} component of wind
@item @option{fileU} @tab @i{none} @tab filename containing the @samp{u} component of wind
@item @option{fileV} @tab @i{none} @tab filename containing the @samp{v} component of wind
@item @option{fileZ} @tab @i{none} @tab filename containing the @samp{Z} component of wind
@item @option{gridBox} @tab @i{none} @tab bounding box for gridded output
@item @option{gridOutput} @tab @i{none} @tab grid size for gridded output
@item @option{logFile} @tab @i{none} @tab filename of a log for STDOUT and STDERR
@item @option{newline} @tab @tab flag to write a new line at every time step to STDOUT
@item @option{path} @tab @samp{./} @tab directory containing the input data
@item @option{opath} @tab @samp{./} @tab directory where data will be written
@item @option{quiet} @tab @tab flag to suppress output
@item @option{sort} @tab @samp{yes} @tab flag to sort output before writing. Default is @samp{yes} for elevation data.
@item @option{varU} @tab @samp{U} @tab variable name in the input file for the @samp{u} component of wind
@item @option{varV} @tab @samp{V} @tab variable name in the input file for the @samp{v} component of wind
@item @option{verbose} @tab @tab flag to create verbose output
@end multitable


Since the number of options specified can be long, they can be put in an input file and Puff will read the file using @option{-argFile}.  Each option should be listed on its own line,  The preceded @verb{|\|} character is optional for backwards compatibility.  Comments map occur on their own line or after the arguments and are identified with the @verb{|#|} character.  For example, the following file is valid

@verbatim
# input file describing the February 19 eruption of Mt. Cleveland
volc Cleveland
eruptDate "2002 02 19 14:10"  # this is the second eruption that day
runHours=5

@end verbatim

The argument file is parsed in the order it is encountered on the command line.  Precedence goes to the last option encountered.  For example, if the above file is named @file{cleveland.args}, the following command would result in a 12-hour simulation

@example
puff -argFile cleveland.args -runHours 12
@end example

Argument files may also be nested, with one argument file calling another.  The precedence order will still apply.

Data for the @samp{u} and @samp{v} components of wind are required.  The temperature @samp{T} and geopotential height @samp{Z} are optional.  Temperature is used for non-constant fall velocities only.  The "standard atmosphere" is used with either @samp{T} or @samp{Z} are not specified.  These files must be in netCDF format, and can be in different files or the same file.  Specification of these files is not necessary because Puff automatically looks for the most recent data for a particular model (from the @option{model} option), but this can be overridden using these options. 

 The exact name of these wind components appearing in the data file must also be specified using the @option{-varU} and @option{-varV} options.  Default values are lowercase @samp{u} and @samp{v}.  Alternatively, the resource file may specify the names using @samp{varUname}, @samp{varVname}, @samp{varZname}, and @samp{varTname}.  Puff will calculate a vertical component of wind using a divergence method. If you wish to save these calculated values along with the other wind and temperature data in a netCDF data file, use the @option{-saveWfile} or @option{-saveWinds} option.  If no option value is given, the file will be named @file{wind_puff.nc}. If a value is given to the option, that name will be used in place of @file{wind}, for example @option{-saveWinds=20040123} will save data to @file{20040123_puff.nc}.

The default input and output directories are the current directory, and can be changed using the @option{-path} and @option{-opath} options, respectively.  
@cindex @option{path}
@cindex @option{opath}

While the simulation is running, a timer will appear in the lower left corner.  If you want a new line to be printed at each time step, use the @option{-newline} option.  The @option{-verbose} flag will cause show almost any value of interest in the simulation, and should probably only be used when debugging.  The @option{-quiet} option is useful when used in scripts or cron jobs.
@cindex @option{newline}

Log files can be specified using @option{-logFile}.  The @option{-quiet} option is set when using log files to suppress the time/date counter from filling the file.
@cindex @option{logFile}

The data written to the output ash files can be sorted prior to writing, which is useful when post-processing the data with another application.  The default is to sort the particles based on height just prior to writing each file.  Sorting can occur only at the beginning of the simulation by assigning the option @samp{no}, or never done by using @samp{never}.  The variable to sort on can also be changed, for example @code{-sort=lon}.  
@cindex @option{sort}

In addition to the default output data files that contain the location of each individual particle, a gridded relative concentration file can be written using the @option{-gridOutput} option.  A file is written with the name template  @samp{YYYYMMDDHHmm_conc.nc}, where the date corresponds to the beginning of the eruption specified by @option{-eruptDate}.  Only one file is written that contains data for all times specified by @option{-saveHours}.   The spacing of the grid can be specified by giving the @option{gridOutput} a value in the form @samp{dHorz/dVert}, for example

@verbatim
-gridOutput 0.75/1500
@end verbatim

which creates a grid 0.75 by 0.75 degrees in the horizontal direction and 1500 meters in the vertical.  The lon/lat/height/time grid is just big enough to contain all the data.  The size of the box can be specified using the @option{-gridBox} option with the format @samp{x1:x2/y1:y2:z1:z2}.  Particles that fall outside of the specified box are ignored.  The time dimension can not be modified.
@cindex @option{gridBox}
@cindex @option{gridOutput}
@cindex concentration, relative
@cindex gridded output

@subsection Simulation Parameters
The simulation characteristics are controlled using the following options:

@multitable @columnfractions 0.2 0.2 0.6
@item @b{option} @tab @b{Default} @tab @b{Description}
@item @option{dtMins} @tab 5 @tab time step in minutes
@item @option{eruptDate} @tab @i{none} @tab date/time string of the beginning of the eruption, or hours before 'now' that the eruption began.
@item @option{eruptHours} @tab 6 @tab during of the eruption
@item @option{runHours} @tab 24 @tab simulation length in hours
@item @option{saveHours} @tab 6 @tab interval for saving data
@end multitable


The time step of the simulation is controlled using the option @option{-dtMins}.  The default value is 5 minutes, which is small enough for simulations more than 1 hour.  For finer resolution, smaller values of @option{-dtMins} may help, however, the time resolution of the wind field data may be much more coarse precluding any actual improvement in data quality.
@cindex @option{dtMins}

The duration of the simulation can be changed the @option{-runHours} option.  There is no theoretical upper limit on the duration of a simulation.  However, when time exceeds the range of the input wind field data, data for the final time will be used.  Extrapolation does not occur.  For this reason, wind field data files may need to be concatenated prior to use.  Fractional values are acceptable, and will be converted into seconds.
@cindex @option{runHours}

Data files are saved every interval defined by @option{-saveHours}.  This value may be fractional, and a numerical value is expected.  Optionally, the save interval in minutes can be specified by appending @samp{min}, such as @command{-saveHours 15min}, which is equivalent to 0.25 hours.

The duration of the eruption is specified using @option{-eruptHours}.  Fractional  values are acceptable.  The total number of particles ejected will be linearly distributed throughout the eruption hours.  A value of zero causes all particles to be ejected at the commencement of the simulation.
@cindex @option{eruptHours}
@cindex eruption duration

The date and time of the beginning of the eruption must be specified using @option{-eruptDate}.  There are two acceptable formats: absolute and relative.  Absolute times are of the form @command{"YYYY MM DD HH:MM"} and relative times are of the form @command{"-N"} where @command{N} is the number of hours prior to the current time.  Fractional values are acceptable for relative time.  Note that wind field data in "puff-friendly" format must be available for the time specified (unless different data is specified using the @option{-fileU} and @option{-fileV} options.)
@cindex @option{eruptDate}
@cindex eruption time

@subsection Digital Elevation Models
@anchor{digital elevation models}
@cindex DEM 
@cindex digital elevation model 
Puff can optionally use a digital elevation model (DEM) to determine when ash particles hit the ground.  The type of DEM to use is specified with the @option{-dem} option, and the value corresponds to the nick name used in the resource file directive @samp{dem=...}, see @xref{The puffrc file}.  There are currently two types of DEM supported, GTOPO30 (@url{http://edcdaac.usgs.gov/gtopo30/gtopo30.html}) and DTED0 (@url{geoengine.nima.mil}).  GTOPO30 is a freely available DEM on a 30 arc-second grid, and is based on DTED0.  GTOPO30 data comes in 32 tiles.  DTED0 data is primarily has a 30 arc-second resolution, however, extreme latitude data is 60 arc-second in longitude.  DTED0 data comes in 1-degree by 1-degree tiles, for a total of 64,800 tiles.  The location of these data files must be in the @file{puffrc} resource file in order to Puff to find them.

The relative resolution can be reduced, which can significantly increase simulation speed.  The resolution reduction occurs by factors of two and is specified optionally after the dem type using a colon, i.e. @option{dem=gtopo30:2} would be a 4-fold (2 squared) reduction in resolution.  Only values that evenly divide the number of DEM data points are valid. Using a reduced resolution has limited speed benefits for DTED0 since the tiles are relatively small and only necessary tiles are read into memory.  Because GTOPO30 tiles are larger, there is a larger overhead when reading higher resolutions, and using a lower resolution can have significantly improved speed.

Each tile is read into memory when an ash particle crosses into its boundary (contrary to how windfield data is handled).  If a particle DEM tile does not exist, the DEM for that location will be ignored and the default ground-level value of zero meters will be used.  In general, using a DEM significantly increases run time, and should only be used if fallout or near-surface transport information is desired.  
 

@section Options for @command{uni2puff}
The functionality of @command{uni2puff} has now been incorporated into @command{puff}, rendering it unnecessary.  Since @command{uni2puff} converts the vertical coordinate from pressure levels to absolute height, @command{puff} runs much faster if the files are preprocessed.  This can be accomplished by running @command{puff} with the @option{-saveWinds} options, which will save the windfields to a file named @file{wind_puff.nc} after performing the conversion.  This file can be used for subsequent faster simulations by either renaming the file to something in your @file{.puffrc}, or using the @option{-fileAll} option (which sets all the @option{-file@i{X}} for @i{X} = T,U,V,Z).  

@example
puff -volc "st. helens" -eruptDate "2002 09 25 00:00" \
-saveWinds > /dev/null
puff -volc gareloi -eruptDate "2002 09 25 00:00" -fileAll wind_puff.nc
@end example

@command{uni2puff} may still be desirable if smaller data files are necessary by using the @option{-range} option.   The rest of this section is retained for historical documentation.

The @command{uni2puff} data format converter converts data on a vertical pressure scale to a vertical geopotential height scale.  It also attempts to patch bad data by interpolating for missing values.  Since version 2.1, it is not necessary to use @command{uni2puff} before running @command{puff}.  However, it several simulations are to be performed using the same input data, it can increase run-time speed to preconvert and patch files.

This utility works for converting from netCDF files, which are a data storage format designed and supported by Unidata (hence the name). If you need to convert file from GRIB format, you need to use a different utility such as @command{wgrib}, @command{gribtonc} or @command{gribtopf}. 

The files produced by @command{uni2puff} are named @code{yymmddhh_puffX.cdf} where @code{yy} is the year, @code{mm} is the month, @code{dd} is the day, and @code{hh} is the hour. @code{X} is either @code{U} or @code{V}, depending on which of the two principle wind directions the file describes. The input file may contain much more data that you need. What you will use is a 4-dimensional data block: three space dimensions and time. This file is in the binary netCDF format. 

The @command{uni2puff} utility is used because most raw data files you will work with have the vertical dimension in pressure units (e.g. millibars). Additionally, some data files are much larger than necessary. 

There are several command-line flags and you can see a listing of them and their default values by sending the @code{help} flag. 

@command{uni2puff -help}

You should see a brief description of the usage and options. A complete description of all options is given at the end of this section. 
 
@subsection Basic Usage 

In basic operation, @command{uni2puff} needs two input files: one for the for the @samp{u} and @samp{v} components of wind. An input file for each component will then be created that can be fed directly into @command{puff}.   Assuming data is stored in the directory @code{/data/}, and operating on  one file at a time, the simplest method is the following: 

@command{uni2puff -unifile /data/2001091912\_avn-U.cdf -var u}

If successful, the following verbiage is sent to standard output. 

@noindent
@example
uni2puff: Reading /data/2001091500_avn-U.cdf ... Done.
uni2puff: Patching /data/2001091500_avn-U.cdf ... Done.
uni2puff: Simple vertical approximation to geopotential meters ... Done.
uni2puff: Writing 01091500_puffU.cdf ... Done. 
@end example

There should now be a second file called @code{01091912_puffU.cdf}, which can be fed directly into @command{puff}. Note that the year marker @code{yyyy} from the original file has been truncated to the last two digits. This does not pose a problem since the complete date, including 4-digit year is stored within the data file itself. 

Four things occurred during this operation:
@itemize @bullet
@item Read the U-component of the wind field for the entire planet at all levels, latitudes, longitudes, and forecast times. 
@item Patched any bad data from the input file. 
@item Converted the vertical height from units of pressure to units of meters. (Using a simple approximation, more on that later). 
@item Wrote a puff-friendly file in the current directory. 
@end itemize

Note that @command{uni2puff} does not alter the original source file at all, so it can (and probably should) be read-only. The @option{-var} flag specifies to read the U-component of the wind field. An identical way to convert both files at the same time is: 

@command{uni2puff -var u,v -path /data/ 2001091500_avn-U.cdf 2001091500_avn-V.cdf }

The files coming after the options must be in the same order as the specification of variables using @option{-var}, and need not be comma-delimited.  Now there should be two puff input files in the working directory, one for @samp{u} and one for @samp{v}. The puff input files created may be somewhat smaller than the original files because only the @var{u} and @var{v} variables have been extracted. If both components of wind are in the same input file, simply specify that filename twice:

@command{uni2puff -var u,v -path /data/ 2001091500_avn-UV.cdf} 

@subsection Subsectioning using @option{-range}
@cindex @option{range} 

Assume you are interested in simulating a volcano on the Aleutian Chain in Alaska, Veniaminof for example. You obviously don't need the
wind field data in Africa, so it can be left when creating your puff input file. In the interest of disk space, it is desirable to work with a smaller
file. Also, @command{puff} runs considerably faster when using smaller input files. In this case, you would use the @option{-range} flag and specify the area you are interested in. The Veniaminof is located at 200.6 East longitude and 56.2 North latitude. Traditionally, longitude is measured positive eastward from Greenwich, England, spanning 0 to 360 degrees. It can also be measured from -180 to 180 degrees, but zero is still in Greenwich. The @option{-shiftWest} flag is defaulted to true meaning all longitude values will be "shifted west" so they are positive (0-360). 
 
@cindex @option{shiftWest}

The following command would create a smaller, more manageable input file this still covers the area you are interested in: 

@command{uni2puff -var u -range 0:100/0:1000/0:90/150:250 2001091500_avn-U.cdf}

You would then see the following verbiage preceding the usual messages: 
@verbatim
uni2puff: Unidata grid:
uni2puff: frtime = 0:100
uni2puff: level = 0:1000 
uni2puff: lat = 0:90 
uni2puff: lon = 150:250 
@end verbatim

Here you are notified about the section of data @command{uni2puff} is going to extract. The first line tells you the original data file is a Unidata grid. The
second variable is the time span you re requested in hours. Next is the height level in in millibars, followed by latititude and longitude in degrees. The entire vertical span is sampled since the range of pressure goes from 0 to 1000 millibars (1000 millibars is approximately atmospheric pressure at sea level).  If the regions you request are greater than what is in the original file, @command{uni2puff} will take it all. In the above example, we wanted all levels, so  a very large vertical range was specified. You can check to see what region you ended up with using @command{ncdump}, the netCDF utility. You'll probably
want to use the @option{-v} flag which isolates one of the above variables, so you don't have to wade through all the wind field data. See the netCDF documentation for more about @command{ncdump}.
@cindex @command{ncdump} 

@subsection NCEP (formerly NMC) Grids
If you are processing wind field data on an NCEP grid, there are a couple more options you must specify.  As a default @command{uni2puff} assumes gridded lat/lon coordinates.  NCEP grids are are in a column/row format, usually in kilometers. Use the option @option{-nmc=true} to specify that the netCDF dimensions are @code{row} and @code{col} instead of @code{lat} and @code{lon}.  Furthermore, make sure you specify @option{-shiftWest=false} so that @command{uni2puff} does not attempt to translate any negative @code{col} values by +360.  
@cindex @option{shiftWest}
@cindex @option{nmc}
@cindex NMC

The following are some details about how NCEP grids correlate with lat/lon values.  NCEP grid specifications are available currently at

@url{www.comet.ucar.edu/strc/data/data_doc.htm}.  

Each grid is a quadrilateral projected downward onto the planet (think about how a 2-dimensional picture of the earth would look when taken from a very high elevation, but not so high that the planet does not completely fill the field of view).  If lat/lon lines were drawn onto that picture, it would look something like the inner quadrilateral in the figure below.  The coordinates @math{(x1,y1)} and @math{(x3,y3)} mark the extent of the grid.  The @math{y} value @math{LONV} is the "vertical longitude", or that longitude line that appears completely vertical in the grid.  

@image{images/ncepgrid}

The area is then evenly gridded and @math{dx} and @math{dy} specify the resolution.  Each NCEP grid has a specified resolution, @math{LONV} value, and area of coverage specified by @math{(x1,y1)} and @math{(x3,y3)}.  Two other values that are specified for each grid are:

@math{x_{off} = -dx / x1}

@math{y_{off} = -dy / y1}

Puff uses the following approximation to obtain latitude and longitude values from @code{(x,y)} values:

@math{lon = LONV + arctan(-x/y)*180/3.14}

@math{lat = 90 - 2 arctan(A)*180/3.14}

@math{A = 0.5 sqrt(x*x + y*y) /(Re f)}

where @math{Re} is the approximate earth radius at 6764 km and @math{f} is a correction factor of 0.933.  The earth is approximated as a sphere.

@subsection Pressure to Meter Conversions 

In the output from the first example, you were notified that a simple vertical approximation to geopotential meters was used. This means that when
converting from pressure units to meters, an average correlation typical for the planet is used. This is like the plot you'll find in an elementary geology or atmospheric chemistry book. This may or may not be fine for your purposes. If your simulations are taking place somewhere that pressure-to-height correlations are drastically different than the average, you will want to specify how to do the conversion. If you are fortunate enough to have geopotential height data for the area and time span you are interested in, you should use it. If it is already in a netCDF format, simply specify the file using the @code{-Hfile} and @code{-Hvar} flags. 
@cindex geopotential meters

@verbatim
uni2puff -var u -range 0:100/0:100000/0:90/150:250 \
-Hfile 2001091500_avn-H.cdf -Hvar Z  2001091500_avn-U.cdf 
@end verbatim

The @option{-Hfile} option specified the file containing geopotential height data, and the @option{-Hvar} option says what the variable is named in the data file, in this case it is Z. You can check beforehand using @code{ncdump -h filename.cdf}, which dumps only the header information from the netCDF file.  If the geopotential data does not span the same time and space as the wind field data, you will get an error.  

@subsection Other Options 

All options currently supported are listed below. The default values are shown in square brackets. 
@itemize @bullet
@item @option{-help} gives a summary of usage and options. [false] 

@item @option{-Hconst} Specifies the constant RT/g that relates geopotential height to meters when using a simple approximation. [7400] 

@item @option{-Hfile} specifies the file that contains geopotential height to meters conversion data. [""]

@item @option{-Hsimple} A true/false flag specifying for using the simple geopotential height to meters correlation. [false] 

@item @option{-Hvar} Specifies the variable name in the netCDF file that contains geopotential height data.[""]

@item @option{-nmc} says that the original data file is in NMC format and not lat/lon. [false]

@item @option{-noPatch} says not to patch any bad data. [false]

@item @option{-P0} Specifies the pressure in millibars at the ground surface when when using the simple approximation for geopotential height. [1000]

@item @option{-path} Include this path in file names for source files. It is not used when writing the puff input files. [""]

@item @option{-range} Specifies a region of time, height, latitude, and longitude from the original data file. [""]

@item @option{-shiftWest} A true/false flag whether to shift longitude values from -180:180 to 0:360. [true]

@item @option{-var} Set Unidata variable name or names - comma separated list [""] 

@item @option{-unifile} An optional way to specify filenames instead of listing last on the command line.  This may be useful for a script that builds a system command by adding pairs of @option{-unifile} and @option{-var} sequentially.
@end itemize

@section Options for @command{ashdump}
@command{ashdump} is a fairly simply utility that dumps data from the puff-generated netCDF files to the standard output.  This output can be piped to other applications or a text file.  When used without options, it will print a brief header with some details about the eruption and the data contained in the file, followed by a listing of the location, size, and age of each particle in column format.  To see just the header, use the @option{-hdr} option.  More details about the input parameters to the simulation are possible using @option{-shoparams}.  A summary of some statistical information can be seen using @option{-stats}.

@subsection Filtering
Filtering is possible by location, and size using @option{-range}, @option{-height} and @option{-size}.  for example, to only list particles in the box 210 to 212 degrees longitude, 50 to 52 degrees latitude, 10000 to 15000 meters, and of a size smaller than 100 microns

@example
uni2puff -unifile 02.268.0600_ash.cdf -range 210/212/50/52 -height 10000/15000 \
-size 0/1e-4
@end example

To see only particles that are still airborne, use @option{-active} which filters out any particles with an elevation of zero.

@subsection Output Control
A listing of any subset of the particles details is possible using the options @option{-lat}, @option{-lon}, @option{-z}, @option{-sz}, and @option{age}.  The header will not be printed with these options, and any number of these options can be combined.  The column width is controlled using @option{-width}, and the precision of the output using @option{-precision}.  

@section Options for @command{ashxp}
The postprocessor @command{ashxp} generates JPEG images from the data in puff-generated ash files.  A bounding box is defined such that all particles are contained in the image with a minimum size of 256 x 256 pixels.  If more than one ash file are specified on the command line, the bounding box for all images will the same, which is useful for creating animations or comparing results side by side.  The GUI @command{pufftk} uses @command{ashxp}.

@multitable @columnfractions 0.3 0.25 0.45
@item @b{long option} @tab @b{short option} @tab @b{Description}
@item @option{--airborne} @tab @option{-a} @tab do not show particles on the ground
@item @option{--bgfile=FILE} @tab  @option{-b file} @tab specify a background image
@item @option{--border=INT} @tab @option{-b INT} @tab number of pixels on the border
@item @option{--color=COLOR} @tab @option{-c COLOR} @tab specify a color coding scheme
@item @option{--fallout} @tab @option{-f} @tab only show fallout
@item @option{--grayscale} @tab @option{-g} @tab make background grayscale
@item @option{--hgt-range=H1/H2} @tab @option{-h H1/H2} @tab filter particles in height range
@item @option{--include-out-of-bounds} @tab @tab plot out-of-bounds ash
@item @option{--max-height=NUM} @tab @option{-h NUM} @tab maximum displayed height
@item @option{--latlon=y1/y2/x1/x2} @tab @option{-l y1/y2/x1/x2} @tab specify bounding box
@item @option{--min-x-size=INT} @tab @option{-x INT} @tab minimum image x size in pixels
@item @option{--min-y-size=INT} @tab @option{-y INT} @tab minimum image y size in pixels
@item @option{--no-stamp} @tab @tab do not print date/time stamp
@item @option{--pixels=INT} @tab @option{-p INT} @tab pixel size for particles
@item @option{--quiet} @tab @option{-q} @tab do not print output to STDOUT
@item @option{--report} @tab @option{-R} @tab generate a report
@item @option{--sorted} @tab @option{-s} @tab sort particles low to high before imaging
@item @option{--temp} @tab @option{-t} @tab put output in a temporary file
@item @option{--verbose} @tab @option{-v} @tab print lots of output
@item @option{--version} @tab @option{-V} @tab print version
@item @option{--whole} @tab @option{-w} @tab use entire background image
@item 
@end multitable

The default background image is set using the environment variable @env{ASHXP_BG_FILE_NAME}, and can be overridden using the @option{--bgfile} option.  To suppress a background image and plot the data on a black background, set @option{--bgfile=""} or use the @option{--no-background} flag.  Processing speeds are greatly increased when not creating background images.  Any JPEG image can be used as a background file, however, it only makes sense for it to be a global image.  The background image can have any dimensions and @command{ashxp} will use the full resolution available to it. There are three color background images included with the distribution: high, medium, and low resolution. 
@cindex @env{ASHXP_BG_FILE_NAME}
@cindex @option{bgfile}
@cindex @option{no-background}
 
The @option{--hgt-range} option can be used to create ash fallout maps by setting @option{--hgt-range=0/0}.  By setting the lower limit of the height range to a non-zero, positive value, mapping ash fallout is suppressed. This is also accomplished by setting the @option{--airborne} flag. The available coloring protocols in @command{ashxp-1.0} are @samp{gray}, @samp{red}, @samp{rainbow} and @samp{density}.  The @samp{rainbow} option produces color-coded elevation maps similar to earlier versions of @command{pufftk}.  The @samp{density} option color codes by the integrated relative density of ash at a pixel location.  More dense regions have stronger shades of red.  No elevation information is available when density mapping. However, height range filtering (@option{--hgt-range}) can be used in conjunction with this @samp{density} mapping to create maps of relative density in a given elevation slab, like an aviation flight level for example.  
@cindex @option{hgt-range}
@cindex density mapping

Turning on @option{--sorted} causes @command{ashxp} to sort all particles based on elevation, and plots higher elevation ash on top of lower elevation ash.  This option creates images similar to what is seen in remote sensing data.  It is turned off by default since @command{puff} sorts output by default and the sorting is redundant.  The @option{--whole} causes the entire background image to be used instead of clipping out only the relevant area.  This is useful when creating a global perspective, but should be used with caution in conjunction with high-resolution background images.  This option is particularly useful for creating images to use with @command{xplanet} (@url{http://xplanet.sourceforge.net}); a powerful global image processing program.
@cindex @command{xplanet}
@cindex @option{sort}, @command{ashxp}
@cindex @option{whole}

@section Options for @command{grid2pf}
The GRIB to 'puff-friendly' utility does not need any non-filename arguments under most conditions.  However, several options are available to help the utility create the correct data file.
@cindex GRIB conversion

@multitable @columnfractions 0.3 0.7
@item  @b{option} @tab @b{Description}
@item  @option{-d} @i{YYYYMMDDHH} @tab explicitly set the date/time stamp of the first input file
@item @option{-g} @i{grid} @tab explicitly set the grid number, default is obtained from the GRIB header
@item @option{-n} @tab do not create a netCDF file using @command{ncgen}
@item @option{-o} @i{filename} @tab set the output filename, default is @file{YYYYMMDDHH_gridXXX.cdf}.
@item @option{-s} @tab Silence; create no output.
@item @option{-v} @tab verbose output.
@end multitable

@node GUI, Technical Details, Options, Top
@comment node, next, previous, up

@chapter GUI
@cindex @command{pufftk}
This chapter describes the GUI @command{pufftk} version 2.0.  Because of changing software availability and their relative programmability, several GUI's have been created over the years.  Currently, UAF supports @command{pufftk} which uses Perl/Tk.  In additional to the base edition of Perl, the Perl modules @file{Tk.pm} and @file{Tk::JPEG.pm} are required.  Both of these are available for download from the CPAN web site. @command{pufftk} is one giant perl script, and the first line may need to be modified to the location of Perl if it was not configured at installation time.
@cindex CPAN
@cindex JPEG

@section Startup

If @command{pufftk} is in your path, you can simply type its name at the command line prompt. After a few moments, a window will open up titled PuffTk. The top part of the window is used for specifying run parameters for @command{puff}, and the bottom window is used for viewing results afterwards.  The left-hand part of the lower window adjusts creation of the map images.

@section Run Time Specification
The @b{Volcano} drop down menu in the upper left corner is used to select predefined volcanos.  These are read from the @file{volcanos.txt} file that comes with @command{puff}.  This file is editable without recompiling the program. The latitude and longitude boxes should fill automatically when a volcano is selected.  The @b{plume bottom} box will contain the volcano's elevation.  If the latitude and longitude values are changed at this point, these new values will be used instead of the default values.

The @b{Eruption Date} box must follow the format @samp{YYYY MM DD HH:MM}.  This is the time the eruption @i{begins}.  The duration of the eruption can be set using the option boxes listed below this.  Data in puff-friendly format must be available for some time at or before the time the eruption begins.  To select between different wind models, use the drop-down option box @b{Wind Model}.  The options available will differ depending on the filename structure you use to differentiate between wind models.  The @i{general} option is the default filename structure used by puff, which is @samp{YYMMDDHH_puffX.cdf}.  

The @b{Data Dir} entry box should list the directory where the data is stored.  If the environment variable @env{PUFF_DATA_DIR} is set, this will be used.  It may be overridden by using the @option{--data-dir} option.  Use the @b{Browse} button adjacent to the entry box to browse the file system.  After a new directory has been selected, press the @b{Scan} button to scan for available data sets that match the current @b{Wind Model} selected.  The @b{Cycle} drop-down menu will be updated.  The date/time selected for @b{Cycle} @i{must} precede or be the same as the @b{Eruption Date}.
@cindex @env{PUFF_DATA_DIR}
@cindex @option{data-dir}
@cindex cycle, wind

The @b{Restart File} option box is used for multiple eruption simulations, or when using an existing cloud specification file derived from remote sensing data. @xref{cloud specification file}.
@cindex restart file, in @command{ashxp}

@section Option Specification
The ash plume specifications can be set using the option specification boxes on the right side of the window.  If a value is not set, the default value will be used. @xref{default option values}.  Most options have a lower limit of zero and no upper limit.  The paper "Sensitivity of a Volcanic Ash Particle Tracking Model called Puff" explains some technical details about these parameters and their relative effects on model output.  The paper is available at @url{http://puff.images.alaska.edu}.  All these specifications can also be modified from the pull-down menu @b{File | More Options...}.  
@cindex sensitivity

@section Sample Program Run
After a volcano name or location and eruption beginning time have been specified, use the @b{Run} button on the lower, right-hand corner to start the simulation.  The message @code{Initializing...} should appear in the status window on the lower left.  After the wind field data has been read into memory, the simulation begins and the status window will change to a counter for the simulation time.  A progress bar will appear in the lower, right corner.  The simulation is complete when @samp{done.} appears in the status window.  The date/time strings corresponding to the data files saved will appear in the right-hand window.  The data can then be mapped by selected one or more date/time strings and using the options under the @b{View} menu.
  

@section wind field Data
@cindex wind field data

The location of the puff-friendly  data files can be set using the environment variable @env{PUFF_DATA_DIR} or using the @option{data-dir} option with @command{pufftk}.  Filtering different types of input data can be done by setting the regular expression hash variable @var{dataRegExp} in @command{pufftk}.   Different data types can then be filtered by selected a different @b{Wind Model}.  The default format written by @command{uni2puff} is @samp{general} and has the form @file{YYMMDDHH_puffX.cdf} (where @file{X} is either @samp{U} or @samp{V}).  After selecting a Wind Model, the data available are shown in the drop-down @b{Cycle} menu.  Different data directories can be chosen using the @b{Browse} button, or directly editing the @b{Data Dir} entry box.  Press @b{Scan} to regenerate the listing of available data.
@cindex @option{data-dir}, @command{pufftk}
@cindex Wind Model
@cindex Cycle, wind model
@cindex @var{dataRegExp}
@cindex @env{PUFF_DATA_DIR}

@section Restart File
The @b{Restart File} entry is used for multiple eruptions or when using remote sensing data to specify an existing cloud. A relative path (to where @command{ashxp} was executed) or an absolute file name can be used.  The @b{Browse} button will pop up a window for navigating the directory tree.  When using puff-generated data for multiple eruption scenarios, the data in the restart file should be as close as possible to the next eruption time specified in @b{Eruption Date UTC}. If no restart file is specified, the default single eruption is assumed. 

@section Viewing Results
After running a simulation, the date/time strings corresponding the data generated will appear in the data window on the left.  Alternatively, @command{pufftk} can be executed with a list of existing data files for viewing.

@example
pufftk 02.269.0600_ash.cdf 02.269.1200_ash.cdf
@end example

or, use shell expansion for large numbers of files

@example
pufftk *ash.cdf
@end example

On the left-hand side of the main window is the ash control box.  The @b{Ash Data Files} selection window can be used to select and map various data sets.  A range of data sets can be selected by holding the @key{SHIFT} key while making selections for the data window. A non-contiguous group of data sets can be selected by holding the @key{CTRL} key and selecting files.  When multiple data sets are mapped at the same time, all images will have the same bounding box, which is useful for animations.  A custom bounding box can be set using @b{View | Map Options...}.  A pop up window will appear, and the region can be selected by click-and-dragging the rectangular region on the map.  The resolution of the background image can also be selected in this window.  A low resolution map may be desired for simulations where the ash becomes dispersed over a large region to keep the canvas image from becoming excessively scrolled.  The background image can also be suppressed by selecting @b{None}, which greatly speeds up image processing.
@cindex map selection
@cindex region, custom mapping

The elevation of ash particles can be filtered using the two entry boxes below the data selection window.  All particles outside the selected range are ignored when mapping.  To see a ash fallout map, set both ends of the range to zero.  Setting the minimum value larger than the maximum value is an error.
@cindex height filtering

The pixel size of each particle can be adjusted using the scrolling entry box below the height-range entry boxes.  For situations where the ash is particularly diffuse, it is helpful to increase the pixel size.  For dense clouds covering smaller regions, smaller pixels values may appear better.  When using the density-mapping option, larger pixel sizes usually create more descriptive images.
@cindex pixel size

The coloring protocol options are available in the drop-down menu below the pixel size selection box.  Default coloring protocol is a gray-scale with higher elevation particles being while and surface particles being black.  The @b{rainbow} option produces a color-coded elevation map similar to the previous version of @command{pufftk}.  The density-mapping protocol color-codes pixels based on the relative density of ash instead of elevation.  The relative density is computed by integrating the entire column of ash at each pixel location.  Larger pixel sizes usually produce more coherent images when using this option. 

The buttons below the data window can be used for stopping, starting, and stepping through a sequence of images.  Pressing the green arrow will start to loop through all the mapped images.  The red square will stop the animation.  The next two buttons with arrows step forward or backward through the sequence of images.  The speed of the animation in milliseconds can be controlled using the slider below the data window labeled @b{Delay}.

The @b{Update} button recreates all the images using the current settings in the ash control box.  Pressing this button after making adjustments will recreate all the images listed in the @b{Ash Data Files} window.  It can also be used to initially create images of all data files directly after running a simulation.  The @b{Update} button has the same effect as @b{Select All} followed by @b{Map selected}, or @key{Ctrl}-a @key{Ctrl}-m.
@cindex speed, animation
@cindex delay, animation

@node Technical Details, Troubleshooting, GUI, Top
@comment node, next, previous, up

@chapter Technical Details
@section Data Specification 
Puff uses four-dimensional wind field data: three space dimensions and time.  The gridded three space dimensions must cover the entire area over which ash particles travel during the simulation.  If during the course of a simulation an ash particle travels beyond the extent of the three-dimensional space grid, @command{puff} will issue a warning that the particles are out-of-bounds and terminate.  A final ash file will be generated with the current locations of the ash particles.  

@subsection Time Interpolation 
The input data in the time dimension does not need to cover the entire duration of the simulation.  In fact, data for a single time is sufficient as long as it is before the eruption time.  If you do not supply wind field data before the eruption time, an error will result and Puff will not execute.  

If you specify a time series of data, Puff will interpolate between the time values.  For example, assume at a specific location that there is a westerly wind of 10 mph at 12:00 pm.  Furthermore, it is forecasted that the westerly wind will increase to 22 mph by 6pm.  Puff will linearly interpolate to obtain values at all time between 12pm and 6pm.  Thus, there would be a 14mph wind at 2pm and a 18 mph wind at 4pm.  This interpolation will occur at all points where ash particles are located.  

Puff does NOT extrapolate in time, but use the last values for which there is data and assumes a constant value there after.  To continue the above example, if forecast data is not available after 6pm, a constant westerly wind of 22 mph will be assumed for all times later.  

@subsection Space Interpolation 
An interpolation scheme similar to that used for the time series is also used for space.  There is an option to use a spline interpolation in the space dimension.  However, it is questionable whether the overhead required to compute the spline interpolation actually leads to an increase in accuracy.  The default is to use a linear interpolation.  There is no extrapolation allowed in the space dimensions.  If an ash particle travels beyond the extent of data, a warning is issued and the simulation terminates.

@section Bad or Missing Data
If the input wind field data is bad or missing, Puff will attempt to patch it.  This patching is done by @command{uni2puff} and can be turned off by giving the @option{-noPatch} flag.  The patching is done using a spline interpolation technique.  Patching can be done in all four dimensions: time and space.  
@cindex @option{noPatch}

There will almost always be patching done at the highest elevation if you specify the entire vertical range of pressures when executing @command{uni2puff}.  The patching will be performed at the highest elevation by interpolating for a height value (in meters) slightly less than the value corresponding to the smallest pressure value.  For example, assume that the input wind field data is specified at 11 levels ranging from 1000 mb to 70 mb (note that small pressure correspond to large elevations).  If you are using a simple approximation for geopotential height, 70 mb corresponds to 19,769 meters.  In this scenario, @command{uni2puff} will interpolate a value for something like 19,600 meters and use that for the highest elevation.  This is an important point if you give @command{uni2puff} the @option{-noPatch} flag because there will be no height value for the highest elevation in this case.  In an operational setting, it is usually best to allow patching (which is the default).  Use @option{-noPatch} if you are trying to debug strange results that may be the product of particularly bad input data.


@node Troubleshooting, License, Technical Details, Top
@comment node, next, previous, up
@comment @anchor{Troubleshooting}

@chapter Troubleshooting
In a perfect world, everything will always run just as you intended with no errors. In this world, problems will occur. Usually, @command{puff} will give you a coherent message describing the error. If that doesn't help, below is a list of possible reasons things might go wrong and how to fix the problem. 

@itemize @bullet
 @item @b{NMC grid unknown}
 
 @verbatim
ERROR: nmc data: can't get ncvar "grid"}
@end verbatim

You are attempting to run with non-NMC data but didn't specify that.  The default value for @option{nmc} was true in early versions, but later changed to false.  To be safe, it is always best to explicitly set it.

 @item @b{unknown volcano site}
@verbatim
ERROR: Bad volcano site: "klychevskoi" ( -9999 , -9999 )

Expected (-180 < lon < 360) and (-90 < lat < 90)
Explicitly set -volcLon and -volcLat or use a predefined site with -volc

@end verbatim

This volcano name is not in the file @file{volcanos.txt} (set by the environment variable @env{PUFF_VOLCANO_LIST}).  Sometimes this is due to a misspelling, such as the above example where the correct spelling is @samp{Kliuchevskoi}.  A listing of all the volcanos is obtained using @command{puff -showVolcs}.  Since this listing may be very long, piping the output to the @command{grep} utility may be useful.   
@cindex @env{PUFF_VOLCANO_LIST}
@cindex @file{volcanos.txt}

@item @b{file does not contain data}
@verbatim
WARNING: file /home/rorik/data/ncep/uwnd.1992.nc does not contain data covering the eruption beginning at 1992 09 17 11:00
@end verbatim

This error seems like a bug in the program, because obviously the 1992 NCEP reanalysis data file must contain data for 1992.  However, because the original NCEP reanalysis data files use a time variable with units of "hours since 1-1-1", Puff has difficulty working with these relatively large values.  The current work-around is to reference the time variable to something more managable.  In this example, "hours since 1999-1-1" would be more appropriate.  The script @file{reference.pl}, included in the Puff distribution, will do this for you.  Note that the NCO operators (@url{nco.sourceforge.net}) are required to use this script.

@end itemize
@cindex ERROR

@node	License, Index, Troubleshooting, Top
@comment node-name, next, previous, up
@unnumbered Puff 2.6 License

@heading Puff and Related Utilities

Puff and related utilities are software for the tracking and simulation of wind-borne ash particles. They require a gridded wind data set for input, and may possibly require additional third-party software for visualization.

@heading Legal Terms

Permission to use, copy, modify, and distribute this software for any
purpose without fee is hereby granted, provided that this entire
notice is included in all copies of any software which is or includes
a copy or modification of this software and in all copies of the
supporting documentation for such software.

This work was produced as part of my thesis at the University of
Alaska, Fairbanks. Additional support came from a COMET project with
The National Weather Service, Alaska Region. Current support includes
the NWS Forecast Office, Anchorage and the University of Alaska,
Fairbanks.

@center DISCLAIMER

This software was prepared as an account of work sponsored by the
University of Alaska, Fairbanks and an agency of the United States
Government. Neither the United States Government nor the University
of Alaska nor any of their employees, makes any warranty, express or
implied, or assumes any liability or responsibility for the accuracy,
completeness, or usefulness of any information, apparatus, product, or
process disclosed, or represents that its use would not infringe
privately-owned rights.  Reference herein to any specific commercial
products, process, or service by trade name, trademark, manufacturer,
or otherwise, does not necessarily constitute or imply its
endorsement, recommendation, or favoring by the United States
Government or the University of Alaska.  The views and opinions of
authors expressed herein do not necessarily state or reflect those of
the United States Government or the University of Alaska, and shall
not be used for advertising or product endorsement purposes.
@cindex license

@center AUTHOR

Craig Searcy

National Weather Service, Anchorage Forecast Office

6930 Sand Lake Road

Anchorage, AK 99502-1845

@email{craig.searcy@@noaa.gov}

April 1999

@include gpl.texi

@node Index, , License, Top
@comment node, next, previous, up

@unnumbered Index

@printindex cp

@bye
