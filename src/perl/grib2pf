#!/usr/bin/perl -w

use strict;
use Getopt::Std;
use File::Basename;

my $VERSION = "1.0.3";  # made strict
my $PROGRAM = basename($0);

# set these path variables if necessary
my $wgrib="@WGRIB@";
my $ncgen="@NCGEN@";

#modify the wind variable names if necessary
my @type=('UGRD','VGRD');

# these vars are shared with the getopt function
our ($opt_d, $opt_g, $opt_l, $opt_n, $opt_o, $opt_s, $opt_t, $opt_v);
getopts('d:g:l:no:st:v');

# the remaining arguments are the files to process
my @gribfile=@ARGV;

my $filenum = scalar @ARGV;
  if ($filenum < 1) { 
  print "no files to process.\n"; 
  usage();
  exit;
  }
  
# -s is silent, so send output to /dev/null
if ($opt_s) {
  open STDOUT,">/dev/null" or die "can't open /dev/null: $!\n"; 
  }
# -l is logging, send errors there
if ($opt_l) {open STDERR,">$opt_l" or die "can't open error log $opt_l: $!\n";}
# -d explicitely sets the date
if (! $opt_d) { $opt_d = getdate();   }
# without -g, we guess the grid number
if (! $opt_g) { $opt_g = guessgrid($gribfile[0]); }

# these are the only grid numbers we know, edit this if one is added
if ($opt_g != 3 and $opt_g != 207 and $opt_g != 216 
    and $opt_g != 249 and $opt_g != 240 ) {
  die "unknown grid type $opt_g. Sorry. \n";}

# sometimes there is one grib file per time, and we want to put it
# all in various netCDF files, so we have to create the time variable
# based on file information and the -t option
my $frstr = processtime($opt_t);

# we only get U and V right now
my $type=shift @type;

print STDOUT "$filenum file(s) to process\n";

open(OUTFILE,"> $opt_d.txt") or die "Cannot create temporary text file:$!\n";

# dump the netCDF header for this grid
header();

# the level dimension is hardcoded here. We could only extract the
# data available, but it is better to put missing_value there since
# some files may be incomplete while others are not
my $levelstr=getlevels($opt_g);

# this is a crude way to add commas between data values
my $no_comma_flag=1;
foreach (@gribfile){
  datadump($opt_v, $_);
  }  
  
print OUTFILE ";\n\nv = \n";
$type=shift @type;

$no_comma_flag=1;
foreach (@gribfile){
  datadump($opt_v, $_);
  }  
  
print OUTFILE ";\n\n";

# dump the footer for this grid
footer();
close(OUTFILE);

if (! $opt_n) { makecdf($opt_d, $opt_g); }
else { print STDOUT "no netCDF file generated.\n"; }

#---------------------------
# guess the grid number from the first file header
sub guessgrid {
  my $gribfile = shift;
  my ($junk, $gridguess);
  
  my $line = `$wgrib -V -d 1 $gribfile[0]`;
  foreach(split(' ',$line)) {
    if ($_ =~ m/grid=/) {
      ($junk,$gridguess) = split('=',$_);
      last;
      }
    }
  print STDOUT "Grid number appears to be $gridguess\n";
  return $gridguess;
}
#---------------------------
# define the pressure levels depending on the grid type. Then construct a 
# string of the values for the netCDF file header
sub getlevels {
  my $grid = $_[0];
  my @levels;
  
  if ($grid == 3) {
    @levels=(1000, 975, 950, 925, 900, 850 ,800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300, 250, 200, 150, 100, 70, 50, 30, 20, 10); }
    
  elsif($grid == 216) {
  @levels=(50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 876, 900, 925, 950, 975, 1000); }
  
  elsif($grid == 249) {
  @levels=(200.0, 250.0, 300.0, 400.0, 500.0, 700.0, 850.0, 925.0, 1000.0); }
  
  elsif($grid == 207) {
  @levels=(100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700,
 750, 800, 850, 900, 950, 1000); }
 
  elsif($grid == 240) {
  @levels=(10, 20, 30, 50, 70, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 925, 950, 975, 1000, 1013); }
  
  else {die "levels not defined for grid $grid\n";}
  
  my $string ="";
  
  for (my $i=0; $i<(scalar @levels); $i++) {
    $string="$string $levels[$i] ,";
    }

  # substitute a semi-colon for the last comma
  $string=substr($string,0,length($string)-1) . ";";
  
  @main::levels=@levels;
  return $string;
  }  
#---------------------------
# create the netCDF file unless -n flag was given

sub makecdf {
my ($date, $grid) = @_;
my $cdffile;
 
  if (! $opt_o) {$cdffile = "$date\_grid$grid.cdf";}
  else {$cdffile = $opt_o;}
  print STDOUT "Generating netCDF file $cdffile ...\n";
  system ("$ncgen -o $cdffile $date.txt") == 0
    or die "failed to generate netCDF file $cdffile\n";
  system "rm ./$date.txt"; 
}
#---------------------------
# find the record numbers from within the GRIB file for one of the
# wind velocity components. uses 'wgrib' and the 'grep' utility.

sub getrecords {
  my ($type, $gribfile) = @_;
  
my (@fields, @output, $output, %records);
# my (@records);

open GRIBHEADERS, "$wgrib $gribfile | grep $type | grep kpds6=100 |"
  or die "wgrib failed: $!\n";
  %records=();  # clear hash
while ($output = <GRIBHEADERS>) {
  my (@fields) = split(":",$output);
#  push @records, $fields[0];
  $records{$fields[0]} = (split("=",$fields[6]))[1];
  }
close GRIBHEADERS;

return %records;

} 
    
#---------------------------
# extract the data from the GRIB file. uses 'wgrib'.

sub datadump {
my ($verbose, $gribfile) = @_;

my $rec_num;

# get a hash of record -> pressure_level in this GRIB file
my %records=getrecords($type, $gribfile);
my $funcref = sub {$records{$a} <=> $records{$b} };
my @rec = (sort $funcref keys %records);

my $recnum = scalar @rec;
print STDOUT "reading $recnum records from GRIB file $gribfile for $type...\n";

foreach my $level (@main::levels) {
  # find the record number for this pressure level
	foreach (keys %records) { 
	  $rec_num = $_;
	  last if ($records{$rec_num} == $level); 
		}
	# set a flag if we find the correct record for this level
	my $datamissing = 0;
	# make missing_value if we don't have a record for this level
  $datamissing = 1 if ($records{$rec_num} != $level);
	
  my $command = "$wgrib -d $rec_num -text $gribfile";
  if (! $opt_v) { system "$command > /dev/null "; }
  else { system "$command"; }    

  open(DUMPFILE,"dump");
	# lose the header
	my $header = <DUMPFILE>;
  while(my $dat = <DUMPFILE>) {
    if ($dat =~ m/e\+20/ or $datamissing) { $dat = '_'; }
    if ($no_comma_flag == 0) {
      print OUTFILE ", ";
      }
    else {
      $no_comma_flag = 0;		# so we don't get an initial comma 
      }
    chomp $dat;
    print OUTFILE $dat;
    }
  close (DUMPFILE);
  }

}
#---------------------------
# extract the date/time string from the GRIB file header

sub getdate {
  my ($junk,$dateguess);
  
  my $line = `$wgrib -V -d 1 $gribfile[0]`;
  my @terms=split(' ',$line);
  # the date/time is usually the third field in the GRIB header
  $dateguess = $terms[2];
  print STDOUT "date/time stamp looks to be $dateguess\n"; 
  if (length $dateguess != 10) {
    print "which doesn't look correct.  Try using the -d option\n";
    die;
    }
  return $dateguess;
 } 
#---------------------------
# creates the 'frstr' string that stores the time (in hours).

sub processtime {
  my $dt = shift;
  my $i;
  if (! $dt) {
    $dt = 3;
    }
  $i = 0; 
  $frstr = "";
  while ($i < $filenum) {
    $frstr = $frstr . $i*$dt . ", ";
    $i = $i+1;
    }

  # substitute a semi-colon for the last comma
  $frstr=substr($frstr,0,length($frstr)-2) . " ;";
  
  return $frstr;
  }
 
#---------------------------
sub usage {
  print "usage: $PROGRAM [options] GRIBfile(s)\n";
  print "try 'perldoc $PROGRAM' for help with options.\n";
  return;
  }
  
#---------------------------
# here document that prints the netCDF file header 
  
sub header {
  my $filedate;
  if ($opt_g == 249 ) {
    $filedate="$opt_d\_eta";
  print OUTFILE <<FINIS;
netcdf $filedate {
 
dimensions:
        frtime = $filenum ;
        level = 9 ;
        row = 286 ;
        col = 306 ;
        timelen = 20 ;
variables:
        float u(frtime, level, row, col) ;
                u:_FillValue = -99999.f ;
                u:valid_range = -200.f, 200.f ;
                u:units = "meters/second" ;
        float v(frtime, level, row, col) ;
                v:_FillValue = -99999.f ;
                v:valid_range = -200.f, 200.f ;
                v:units = "meters/second" ;
        float frtime(frtime) ;
                frtime:units = "hours" ;
        float level(level) ;
                level:units = "geopotential meters" ;
        float row(row) ;
                row:units = "km" ;
        float col(col) ;
                col:units = "km" ;
        char reftime(timelen) ;
        int grid ;
        int rows ;
        int columns ;
        float delta_row ;
        float delta_column ;
        int yoffset ;
        int xoffset ;
        float vertical_longitude ;
        float longitude1 ;
        float latitude1 ;
        float longitude2 ;
        float latitude2 ;
        float longitude3 ;
        float latitude3 ;
        float longitude4 ;
        float latitude4 ;
        char map_projection ;

// global attributes:
                :title = "NCEP grid 249" ;
data:

 u =
FINIS
} # endif grid 249

elsif ($opt_g == 207) {
  $filedate="$opt_d\_eta";
  print OUTFILE <<FINIS;
netcdf $filedate {
 
dimensions:
        frtime = $filenum ;
        level = 19 ;
        row = 35 ;
        col = 49 ;
        timelen = 20 ;
variables:
        float u(frtime, level, row, col) ;
                u:_FillValue = -99999.f ;
                u:valid_range = -200.f, 200.f ;
                u:units = "meters/second" ;
        float v(frtime, level, row, col) ;
                v:_FillValue = -99999.f ;
                v:valid_range = -200.f, 200.f ;
                v:units = "meters/second" ;
        float frtime(frtime) ;
                frtime:units = "hours" ;
        float level(level) ;
                level:units = "geopotential meters" ;
        float row(row) ;
                row:units = "km" ;
        float col(col) ;
                col:units = "km" ;
        char reftime(timelen) ;
        int grid ;
        int rows ;
        int columns ;
        float delta_row ;
        float delta_column ;
        int yoffset ;
        int xoffset ;
        float vertical_longitude ;
        float longitude1 ;
        float latitude1 ;
        float longitude2 ;
        float latitude2 ;
        float longitude3 ;
        float latitude3 ;
        float longitude4 ;
        float latitude4 ;
        char map_projection ;

// global attributes:
		:history = "created using $PROGRAM $VERSION" ;
                :title = "NCEP grid 207" ;
data:

 u =
FINIS
}   # end if grid 207
elsif ($opt_g == 216 ) {
  $filedate="$opt_d\_eta";
  print OUTFILE <<FINIS;
netcdf $filedate {
 
dimensions:
        frtime = $filenum ;
        level = 39 ;
        row = 107 ;
        col = 139 ;
        timelen = 20 ;
variables:
        float u(frtime, level, row, col) ;
                u:_FillValue = -99999.f ;
                u:valid_range = -200.f, 200.f ;
                u:units = "meters/second" ;
        float v(frtime, level, row, col) ;
                v:_FillValue = -99999.f ;
                v:valid_range = -200.f, 200.f ;
                v:units = "meters/second" ;
        float frtime(frtime) ;
                frtime:units = "hours" ;
        float level(level) ;
                level:units = "geopotential meters" ;
        float row(row) ;
                row:units = "km" ;
        float col(col) ;
                col:units = "km" ;
        char reftime(timelen) ;
        int grid ;
        int rows ;
        int columns ;
        float delta_row ;
        float delta_column ;
        int yoffset ;
        int xoffset ;
        float vertical_longitude ;
        float longitude1 ;
        float latitude1 ;
        float longitude2 ;
        float latitude2 ;
        float longitude3 ;
        float latitude3 ;
        float longitude4 ;
        float latitude4 ;
        char map_projection ;

// global attributes:
		:history = "created using $PROGRAM $VERSION" ;
                :title = "NCEP grid 216" ;
data:

 u =
FINIS
}  # endif for grid 216
elsif ($opt_g == 3) {
  $filedate="$opt_d\_avn";
  print OUTFILE <<FINIS;
netcdf $filedate {

dimensions:
        frtime = $filenum ;
        level = 26 ;
        lat = 181 ;
        lon = 360 ;
        nav = 1 ;
	timelen = 20 ;
variables:
	float frtime(frtime);
		frtime:units = "hours" ;
	char reftime(timelen);
        float level(level) ;
                level:long_name = "level" ;
                level:units = "hectopascals" ;
        float lat(lat) ;
                lat:long_name = "latitude" ;
                lat:units = "degrees_north" ;
        float lon(lon) ;
                lon:long_name = "longitude" ;
                lon:units = "degrees_east" ;
        int Ni(nav) ;
                Ni:long_name = "number of points along a latitude circle" ;
        int Nj(nav) ;
                Nj:long_name = "number of points along a longitude circle" ;
        float La1(nav) ;
                La1:long_name = "latitude of first grid point" ;
                La1:units = "degrees_north" ;
        float Lo1(nav) ;
                Lo1:long_name = "longitude of first grid point" ;
                Lo1:units = "degrees_east" ;
        float La2(nav) ;
                La2:long_name = "latitude of last grid point" ;
                La2:units = "degrees_north" ;
        float Lo2(nav) ;
                Lo2:long_name = "longitude of last grid point" ;
                Lo2:units = "degrees_east" ;
        float Di(nav) ;
                Di:long_name = "Longitudinal direction increment" ;
                Di:units = "degrees" ;
        float Dj(nav) ;
                Dj:long_name = "Latitudinal direction increment" ;
                Dj:units = "degrees" ;
        float u(frtime, level, lat, lon) ;
                u:long_name = "u-component of wind" ;
                u:units = "meters/second" ;
                u:_FillValue = -9999.f ;
                u:navigation = "nav" ;
        float v(frtime, level, lat, lon) ;
                v:long_name = "v-component of wind" ;
                v:units = "meters/second" ;
                v:_FillValue = -9999.f ;
                v:navigation = "nav" ;

// global attributes:
                :history = "created using $PROGRAM $VERSION" ;
data:

u = 
FINIS
}   # end of grid 3
elsif ($opt_g == 240) {
  $filedate="$opt_d\_nogaps";
  print OUTFILE <<FINIS;
netcdf $filedate {

dimensions:
        frtime = $filenum ;
        level = 27 ;
        lat = 181 ;
        lon = 360 ;
        nav = 1 ;
	timelen = 20 ;
variables:
	float frtime(frtime);
		frtime:units = "hours" ;
	char reftime(timelen);
        float level(level) ;
                level:long_name = "level" ;
                level:units = "hectopascals" ;
        float lat(lat) ;
                lat:long_name = "latitude" ;
                lat:units = "degrees_north" ;
        float lon(lon) ;
                lon:long_name = "longitude" ;
                lon:units = "degrees_east" ;
        int Ni(nav) ;
                Ni:long_name = "number of points along a latitude circle" ;
        int Nj(nav) ;
                Nj:long_name = "number of points along a longitude circle" ;
        float La1(nav) ;
                La1:long_name = "latitude of first grid point" ;
                La1:units = "degrees_north" ;
        float Lo1(nav) ;
                Lo1:long_name = "longitude of first grid point" ;
                Lo1:units = "degrees_east" ;
        float La2(nav) ;
                La2:long_name = "latitude of last grid point" ;
                La2:units = "degrees_north" ;
        float Lo2(nav) ;
                Lo2:long_name = "longitude of last grid point" ;
                Lo2:units = "degrees_east" ;
        float Di(nav) ;
                Di:long_name = "Longitudinal direction increment" ;
                Di:units = "degrees" ;
        float Dj(nav) ;
                Dj:long_name = "Latitudinal direction increment" ;
                Dj:units = "degrees" ;
        float u(frtime, level, lat, lon) ;
                u:long_name = "u-component of wind" ;
                u:units = "meters/second" ;
                u:_FillValue = -9999.f ;
                u:navigation = "nav" ;
        float v(frtime, level, lat, lon) ;
                v:long_name = "v-component of wind" ;
                v:units = "meters/second" ;
                v:_FillValue = -9999.f ;
                v:navigation = "nav" ;

// global attributes:
                :history = "created using $PROGRAM $VERSION" ;
		:title = "NOGAPS grid 240";
data:

u = 
FINIS
}   # end of grid 240

else { print "WARNING: no header written.\n"; }
}

#----------------------------
# here document that prints the rest of the netCDF file

sub footer {
  my ($year, $month, $day, $hour);

  $year=substr($opt_d,0,4);
  $month=substr($opt_d,4,2);
  $day=substr($opt_d,6,2);
  $hour=substr($opt_d,8,2);

if ($opt_g == 249 ) {  
  print OUTFILE <<FINIS;
  
 frtime = $frstr
 
 level = $levelstr

 row = 
-4536, -4524, -4512, -4500, -4488, -4476, -4464, -4452, -4440, -4428, -4416, -4404, -4392, -4380, -4368, -4356, -4344, -4332, -4320, -4308, -4296, -4284, -4272, -4260, -4248, -4236, -4224, -4212, -4200, -4188, -4176, -4164, -4152, -4140, -4128, -4116, -4104, -4092, -4080, -4068, -4056, -4044, -4032, -4020, -4008, -3996, -3984, -3972, -3960, -3948, -3936, -3924, -3912, -3900, -3888, -3876, -3864, -3852, -3840, -3828, -3816, -3804, -3792, -3780, -3768, -3756, -3744, -3732, -3720, -3708, -3696, -3684, -3672, -3660, -3648, -3636, -3624, -3612, -3600, -3588, -3576, -3564, -3552, -3540, -3528, -3516, -3504, -3492, -3480, -3468, -3456, -3444, -3432, -3420, -3408, -3396, -3384, -3372, -3360, -3348, -3336, -3324, -3312, -3300, -3288, -3276, -3264, -3252, -3240, -3228, -3216, -3204, -3192, -3180, -3168, -3156, -3144, -3132, -3120, -3108, -3096, -3084, -3072, -3060, -3048, -3036, -3024, -3012, -3000, -2988, -2976, -2964, -2952, -2940, -2928, -2916, -2904, -2892, -2880, -2868, -2856, -2844, -2832, -2820, -2808, -2796, -2784, -2772, -2760, -2748, -2736, -2724, -2712, -2700, -2688, -2676, -2664, -2652, -2640, -2628, -2616, -2604, -2592, -2580, -2568, -2556, -2544, -2532, -2520, -2508, -2496, -2484, -2472, -2460, -2448, -2436, -2424, -2412, -2400, -2388, -2376, -2364, -2352, -2340, -2328, -2316, -2304, -2292, -2280, -2268, -2256, -2244, -2232, -2220, -2208, -2196, -2184, -2172, -2160, -2148, -2136, -2124, -2112, -2100, -2088, -2076, -2064, -2052, -2040, -2028, -2016, -2004, -1992, -1980, -1968, -1956, -1944, -1932, -1920, -1908, -1896, -1884, -1872, -1860, -1848, -1836, -1824, -1812, -1800, -1788, -1776, -1764, -1752, -1740, -1728, -1716, -1704, -1692, -1680, -1668, -1656, -1644, -1632, -1620, -1608, -1596, -1584, -1572, -1560, -1548, -1536, -1524, -1512, -1500, -1488, -1476, -1464, -1452, -1440, -1428, -1416, -1404, -1392, -1380, -1368, -1356, -1344, -1332, -1320, -1308, -1296, -1284, -1272, -1260, -1248, -1236, -1224, -1212, -1200, -1188, -1176, -1164, -1152, -1140, -1128, -1116
;

 col = 
-1800, -1788, -1776, -1764, -1752, -1740, -1728, -1716, -1704, -1692, -1680, -1668, -1656, -1644, -1632, -1620, -1608, -1596, -1584, -1572, -1560, -1548, -1536, -1524, -1512, -1500, -1488, -1476, -1464, -1452, -1440, -1428, -1416, -1404, -1392, -1380, -1368, -1356, -1344, -1332, -1320, -1308, -1296, -1284, -1272, -1260, -1248, -1236, -1224, -1212, -1200, -1188, -1176, -1164, -1152, -1140, -1128, -1116, -1104, -1092, -1080, -1068, -1056, -1044, -1032, -1020, -1008, -996, -984, -972, -960, -948, -936, -924, -912, -900, -888, -876, -864, -852, -840, -828, -816, -804, -792, -780, -768, -756, -744, -732, -720, -708, -696, -684, -672, -660, -648, -636, -624, -612, -600, -588, -576, -564, -552, -540, -528, -516, -504, -492, -480, -468, -456, -444, -432, -420, -408, -396, -384, -372, -360, -348, -336, -324, -312, -300, -288, -276, -264, -252, -240, -228, -216, -204, -192, -180, -168, -156, -144, -132, -120, -108, -96, -84, -72, -60, -48, -36, -24, -12, 0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996, 1008, 1020, 1032, 1044, 1056, 1068, 1080, 1092, 1104, 1116, 1128, 1140, 1152, 1164, 1176, 1188, 1200, 1212, 1224, 1236, 1248, 1260, 1272, 1284, 1296, 1308, 1320, 1332, 1344, 1356, 1368, 1380, 1392, 1404, 1416, 1428, 1440, 1452, 1464, 1476, 1488, 1500, 1512, 1524, 1536, 1548, 1560, 1572, 1584, 1596, 1608, 1620, 1632, 1644, 1656, 1668, 1680, 1692, 1704, 1716, 1728, 1740, 1752, 1764, 1776, 1788, 1800, 1812, 1824, 1836, 1848, 1860
;

 reftime = "$year $month $day $hour:00" ;

 grid = 249 ;
 rows = 286 ;
 columns = 306 ;
 delta_row = 12.0 ;
 delta_column = 12.0 ;
 yoffset = 378 ;
 xoffset = 150 ;
 vertical_longitude = 210 ;
 longitude1 = 188.4 ;
 latitude1 = 45.4 ;
 longitude2 = 152.8446 ;
 latitude2 = 69.6249 ;
 longitude3 = 267.46893 ;
 latitude3 = 69.454 ;
 longitude4 = 231.837 ;
 latitude4 = 45.33377 ;
 map_projection = "P" ;
}
FINIS
} # end if grid 249

elsif ($opt_g == 207) {
  
  print OUTFILE <<FINIS;
  
 frtime = $frstr
 
 level = $levelstr

 row = 
-4769, -4673.75, -4578.5, -4483.25, -4388, -4292.75, -4197.5, -4102.25, -4007, 
-3911.75, -3816.5, -3721.25, -3626, -3530.75, -3435.5, -3340.25, -3245,
-3149.75, -3054.5, -2959.25, -2864, -2768.75, -2673.5, -2578.25, -2483,
-2387.75, -2292.5, -2197.25, -2102, -2006.75, -1911.5, -1816.25, -1721, -1625.75, -1530.5
;

 col = 
-2285, -2189.75, -2094.5, -1999.25, -1904, -1808.75, -1713.5, -1618.25, -1523, 
-1427.75, -1332.5, -1237.25, -1142, -1046.75, -951.5, -856.25, -761, -665.75,
-570.5, -475.25, -380, -284.75, -189.5, -94.25, 1, 96.25, 191.5, 286.75, 382,
477.25, 572.5, 667.75, 763, 858.25, 953.5, 1048.75, 1144, 1239.25, 1334.5,
1429.75, 1525, 1620.25, 1715.5, 1810.75, 1906, 2001.25, 2096.5, 2191.75, 2287
;

 reftime = "$year $month $day $hour:00" ;

 grid = 207 ;
 rows = 35 ;
 columns = 49 ;
 delta_row = 95.25 ;
 delta_column = 95.25 ;
 yoffset = 50 ;
 xoffset = 11 ;
 vertical_longitude = 210 ;
 longitude1 = 184.359 ;
 latitude1 = 42.085 ;
 longitude2 = 153.689 ;
 latitude2 = 63.976 ;
 longitude3 = 266.311 ;
 latitude3 = 63.976 ;
 longitude4 = 235.641 ;
 latitude4 = 42.085 ;
 map_projection = "P" ;
}
FINIS
}  # end if grid 207

elsif ($opt_g == 216) {
  print OUTFILE <<FINIS;
  
 frtime = $frstr
 
 level = $levelstr

 row = 
-5405, -5360, -5315, -5270, -5225, -5180, -5135, -5090, -5045, -5000, -4955,
-4910, -4865, -4820, -4775, -4730, -4685, -4640, -4595, -4550, -4505, -4460,
-4415, -4370, -4325, -4280, -4235, -4190, -4145, -4100, -4055, -4010, -3965,
-3920, -3875, -3830, -3785, -3740, -3695, -3650, -3605, -3560, -3515, -3470, -3425, -3380, -3335, -3290, -3245, -3200, -3155, -3110, -3065, -3020, -2975,
-2930, -2885, -2840, -2795, -2750, -2705, -2660, -2615, -2570, -2525, -2480, -2435, -2390, -2345, -2300, -2255, -2210, -2165, -2120, -2075, -2030, -1985,
-1940, -1895, -1850, -1805, -1760, -1715, -1670, -1625, -1580, -1535, -1490, -1445, -1400, -1355, -1310, -1265, -1220, -1175, -1130, -1085, -1040, -995, -950, -905, -860, -815, -770, -725, -680, -635
;

col = 
-4223, -4178, -4133, -4088, -4043, -3998, -3953, -3908, -3863, -3818, -3773,
-3728, -3683, -3638, -3593, -3548, -3503, -3458, -3413, -3368, -3323, -3278, -3233, -3188, -3143, -3098, -3053, -3008, -2963, -2918, -2873, -2828, -2783, -2738, -2693, -2648, -2603, -2558, -2513, -2468, -2423, -2378, -2333, -2288, -2243, -2198, -2153, -2108, -2063, -2018, -1973, -1928, -1883, -1838, -1793, -1748, -1703, -1658, -1613, -1568, -1523, -1478, -1433, -1388, -1343, -1298, -1253, -1208, -1163, -1118, -1073, -1028, -983, -938, -893, -848, -803, -758,
-713, -668, -623, -578, -533, -488, -443, -398, -353, -308, -263, -218, -173, -128, -83, -38, 7, 52, 97, 142, 187, 232, 277, 322, 367, 412, 457, 502, 547, 592, 637, 682, 727, 772, 817, 862, 907, 952, 997, 1042, 1087, 1132, 1177, 1222, 1267, 1312, 1357, 1402, 1447, 1492, 1537, 1582, 1627, 1672, 1717, 1762, 1807, 1852, 1897, 1942, 1987
;

 reftime = "$year $month $day $hour:00" ;

 grid = 216 ;
 rows = 107 ;
 columns = 1399 ;
 delta_row = 45 ;
 delta_column = 45 ;
 yoffset = 120 ;
 xoffset = 94 ;
 vertical_longitude = 225 ;
 longitude1 = 187.0 ;
 latitude1 = 30.0 ;
 longitude2 = 143.597 ;
 latitude2 = 50.454 ;
 longitude3 = 297.15 ;
 latitude3 = 70.111 ;
 longitude4 = 245.144 ;
 latitude4 = 38.29 ;
 map_projection = "P" ;
}
FINIS
}  #end if grid 216

elsif ( $opt_g == 3 ) {

print OUTFILE <<FINIS;
  
 frtime = $frstr
 
 level = $levelstr
 
 lat = 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90 ;
 
 lon = 
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359 ;

reftime = "$year $month $day $hour:00" ; 
Ni = 360 ;
Nj = 181 ;
La1 = 90 ;
Lo1 = 0 ;
La2 = -90 ;
Lo2 = 359 ;
Di = 1.0 ;
Dj = 1.0 ;
}
FINIS
} # end if grid 3

elsif ( $opt_g == 240 ) {

print OUTFILE <<FINIS;
  frtime = $frstr
  
  level = $levelstr
  
   lat = -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 ;
 
 lon = 
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359 ;

reftime = "$year $month $day $hour:00" ; 
Ni = 360 ;
Nj = 181 ;
La1 = -90 ;
Lo1 = 0 ;
La2 = 90 ;
Lo2 = 359 ;
Di = 1.0 ;
Dj = 1.0 ;
}
FINIS
} # end if grid 240

else { print "WARNING: no footer written.\n"; }
}

=head1 NAME

grib2pf - Make a puff-friendly netCDF file from GRIB file(s).

=head1 SYNOPSIS

B<grib2pf> [B<-d date>] [B<-g grid>] [B<-l logfile>] [B<-nsv>] [B<-t time_increment>] I<file1 file2>...

=head1 DESCRIPTION

I<grib2pf> makes a puff-friendly netCDF file from a GRIB file.  The GRIB  files must be specified on the command line.  GRIB files are GRIdded Binary files which are a WMO standard.  To save space, GRIB files do not include coordinate values, so these are supplied within I<grib2pf>.  The GRIB file decoder utility B<wgrib> and the netCDF file generator B<ncgen> are used.  The created file(s) must still be processed with I<uni2puff> to be used with the the Puff volcanic ash tracking model.  This separation is intentional so changes in uni2puff do not need to be recreated here.

An intermediate text file is generated that contains all the data in ASCII format. This file can be very large, so make sure there is enough available space when concatenating several large GRIB files.  This intermediate file is removed unless the B<-n> option is used.

=head1 OPTIONS

B<-d> I<date>

specify the date/time for the first file.  The format should be yyyymmddhh.  If not specified, the date/time is extracted from the first GRIB file.

B<-g> I<grid>

specify the grid number on which the GRIB file is valid.  If not specified, the grid number is extracted using a pattern match on the first record of the first GRIB file.
]
B<-l> I<logfile>
if specified, error messages go here instead of standard out.

B<-n>

if given, B<no> netCDF files is generated by the B<ncgen> utility and the intermediate text file named I<yyyymmddhh.txt> will remain.

B<-o>

specify the output filename.  If not given, I<grib2pf> creates a name based on the date and the grid type.

B<-s>
Silent.  STDOUT is sent to /dev/null.

B<-t> I<time_increment>

This is the increment, in hours, between each file.  If not specified, the default is 3 hours.  It is assumed that the GRIB files specified on the command line are given in ascending order and the time in between each file is the same.

B<-v>

verbose output. This includes a listing of all the GRIB records being read by the B<wgrib> utility.

=head1 LIMITATIONS

I have not figures out how to use a named pipe when extracting grib records using I<wgrib>.  Currently, a file called dump is written and then read.

There is almost no error checking.  It is assumed that the correct type of GRIB files are supplied and in chronological order.  

=head1 SEE ALSO

This utility was written as part of the PUFF volcanic ash tracking project.  See puff.images.alaska.edu.

More information about GRIB files of weather data is available from NCEP at www.emc.ncep.noaa.gov.

Auxillary utilities required:

B<wgrib> see wesley.wwb.noaa.gov/wgrib.html 

B<ncgen> see www.unidata.ucar.edu/packages/netcdf/

=head1 COPYRIGHT

(c) 2001,2002 by Rorik Peterson, Geophysical Institute, University of Alaska, Fairbanks.

=head1 AUTHOR

Rorik Peterson, rorik@gi.alaska.edu

=cut
